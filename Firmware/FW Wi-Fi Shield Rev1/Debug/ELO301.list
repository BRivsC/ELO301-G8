
ELO301.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005df0  08005df0  00015df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f3c  08005f3c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005f3c  08005f3c  00015f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f44  08005f44  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f44  08005f44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f48  08005f48  00015f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000074  08005fc0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08005fc0  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013779  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae5  00000000  00000000  0003381d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00036308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00037318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e3f  00000000  00000000  000381f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015702  00000000  00000000  0005d02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da6d8  00000000  00000000  00072731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ce09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000459c  00000000  00000000  0014ce5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005dd8 	.word	0x08005dd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005dd8 	.word	0x08005dd8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <setModeToStation>:
  * @brief	Set the WIFI mode to station
  * @note
  * @param	void
  * @retval	void
  */
void setModeToStation(void){
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*) CWMODE, strlen(CWMODE), 10);
 8000598:	230a      	movs	r3, #10
 800059a:	220d      	movs	r2, #13
 800059c:	4902      	ldr	r1, [pc, #8]	; (80005a8 <setModeToStation+0x14>)
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <setModeToStation+0x18>)
 80005a0:	f003 fc6a 	bl	8003e78 <HAL_UART_Transmit>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08005df0 	.word	0x08005df0
 80005ac:	2000012c 	.word	0x2000012c

080005b0 <setAPcnx>:
  * @param	name		String with Name of the AP
  * @param	pWord		String with Password of the AP
  * @retval	void
  */
#ifdef FIXED_AP
void setAPcnx(void){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*) CWJAP, strlen(CWJAP), 10);
 80005b4:	230a      	movs	r3, #10
 80005b6:	221f      	movs	r2, #31
 80005b8:	4902      	ldr	r1, [pc, #8]	; (80005c4 <setAPcnx+0x14>)
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <setAPcnx+0x18>)
 80005bc:	f003 fc5c 	bl	8003e78 <HAL_UART_Transmit>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	08005e00 	.word	0x08005e00
 80005c8:	2000012c 	.word	0x2000012c

080005cc <sendSensorData>:
  * @note	Packet structure is following
  * 		AT+HTTPCLIENT=2,0,"https://api.thingspeak.com/update?api_key=GZRNUT0P1NZ465CE&field1=5",,,2
  * @param	sensorData		Pointer to the string that contains the data to send
  * @retval	void
  */
void sendSensorData(uint8_t* sensorData){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b09e      	sub	sp, #120	; 0x78
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	6078      	str	r0, [r7, #4]
	char temp[100];
	memset(temp,0,sizeof(temp));
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2264      	movs	r2, #100	; 0x64
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 ff6f 	bl	80054c0 <memset>
	sprintf(temp, "%s\"%s%s\"%s", HTTPCLIENT, HTTPURL, sensorData,HTTPEND);
 80005e2:	f107 000c 	add.w	r0, r7, #12
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <sendSensorData+0x50>)
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <sendSensorData+0x54>)
 80005f0:	4a0c      	ldr	r2, [pc, #48]	; (8000624 <sendSensorData+0x58>)
 80005f2:	490d      	ldr	r1, [pc, #52]	; (8000628 <sendSensorData+0x5c>)
 80005f4:	f004 ff6c 	bl	80054d0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, strlen(temp), 50);
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fdef 	bl	80001e0 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	f107 010c 	add.w	r1, r7, #12
 800060a:	2332      	movs	r3, #50	; 0x32
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <sendSensorData+0x60>)
 800060e:	f003 fc33 	bl	8003e78 <HAL_UART_Transmit>
}
 8000612:	bf00      	nop
 8000614:	3770      	adds	r7, #112	; 0x70
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	08005e84 	.word	0x08005e84
 8000620:	08005e20 	.word	0x08005e20
 8000624:	08005e64 	.word	0x08005e64
 8000628:	08005e78 	.word	0x08005e78
 800062c:	2000012c 	.word	0x2000012c

08000630 <resetModule>:
  * @brief	Reset the ESP module
  * @note
  * @param	void
  * @retval	void
  */
void resetModule(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*) RST, strlen(RST), 10);
 8000634:	230a      	movs	r3, #10
 8000636:	2208      	movs	r2, #8
 8000638:	4902      	ldr	r1, [pc, #8]	; (8000644 <resetModule+0x14>)
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <resetModule+0x18>)
 800063c:	f003 fc1c 	bl	8003e78 <HAL_UART_Transmit>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	08005e8c 	.word	0x08005e8c
 8000648:	2000012c 	.word	0x2000012c

0800064c <chg_led_state>:


#include "funciones.h"


void chg_led_state(enum LEDS leds){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	switch(leds){
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b03      	cmp	r3, #3
 800065a:	d837      	bhi.n	80006cc <chg_led_state+0x80>
 800065c:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <chg_led_state+0x18>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	08000675 	.word	0x08000675
 8000668:	0800068b 	.word	0x0800068b
 800066c:	080006a1 	.word	0x080006a1
 8000670:	080006b7 	.word	0x080006b7
	case CONEXION_EXITOSA:
		HAL_GPIO_WritePin(GPIO_LED_VERDE_GPIO_Port, GPIO_LED_VERDE_Pin, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	4816      	ldr	r0, [pc, #88]	; (80006d4 <chg_led_state+0x88>)
 800067a:	f001 f98b 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_LED_ROJO_GPIO_Port, GPIO_LED_ROJO_Pin, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	4815      	ldr	r0, [pc, #84]	; (80006d8 <chg_led_state+0x8c>)
 8000684:	f001 f986 	bl	8001994 <HAL_GPIO_WritePin>
		break;
 8000688:	e020      	b.n	80006cc <chg_led_state+0x80>
	case BUSY:
		HAL_GPIO_WritePin(GPIO_LED_VERDE_GPIO_Port, GPIO_LED_VERDE_Pin, 1);
 800068a:	2201      	movs	r2, #1
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <chg_led_state+0x88>)
 8000690:	f001 f980 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_LED_ROJO_GPIO_Port, GPIO_LED_ROJO_Pin, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <chg_led_state+0x8c>)
 800069a:	f001 f97b 	bl	8001994 <HAL_GPIO_WritePin>
		break;
 800069e:	e015      	b.n	80006cc <chg_led_state+0x80>
	case FALLO_CRITICO:
		HAL_GPIO_WritePin(GPIO_LED_VERDE_GPIO_Port, GPIO_LED_VERDE_Pin, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <chg_led_state+0x88>)
 80006a6:	f001 f975 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_LED_ROJO_GPIO_Port, GPIO_LED_ROJO_Pin, 1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2140      	movs	r1, #64	; 0x40
 80006ae:	480a      	ldr	r0, [pc, #40]	; (80006d8 <chg_led_state+0x8c>)
 80006b0:	f001 f970 	bl	8001994 <HAL_GPIO_WritePin>
		break;
 80006b4:	e00a      	b.n	80006cc <chg_led_state+0x80>
	case OFF:
		HAL_GPIO_WritePin(GPIO_LED_VERDE_GPIO_Port, GPIO_LED_VERDE_Pin, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <chg_led_state+0x88>)
 80006bc:	f001 f96a 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_LED_ROJO_GPIO_Port, GPIO_LED_ROJO_Pin, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2140      	movs	r1, #64	; 0x40
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <chg_led_state+0x8c>)
 80006c6:	f001 f965 	bl	8001994 <HAL_GPIO_WritePin>
	}

};
 80006ca:	e7ff      	b.n	80006cc <chg_led_state+0x80>
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	48000800 	.word	0x48000800
 80006d8:	48000400 	.word	0x48000400

080006dc <MX_GPIO_Init>:
        * EXTI
     PC0   ------> I2C3_SCL
     PC1   ------> I2C3_SDA
*/
void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	4b59      	ldr	r3, [pc, #356]	; (8000858 <MX_GPIO_Init+0x17c>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a58      	ldr	r2, [pc, #352]	; (8000858 <MX_GPIO_Init+0x17c>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b56      	ldr	r3, [pc, #344]	; (8000858 <MX_GPIO_Init+0x17c>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	4b53      	ldr	r3, [pc, #332]	; (8000858 <MX_GPIO_Init+0x17c>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a52      	ldr	r2, [pc, #328]	; (8000858 <MX_GPIO_Init+0x17c>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b50      	ldr	r3, [pc, #320]	; (8000858 <MX_GPIO_Init+0x17c>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b4d      	ldr	r3, [pc, #308]	; (8000858 <MX_GPIO_Init+0x17c>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a4c      	ldr	r2, [pc, #304]	; (8000858 <MX_GPIO_Init+0x17c>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b4a      	ldr	r3, [pc, #296]	; (8000858 <MX_GPIO_Init+0x17c>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b47      	ldr	r3, [pc, #284]	; (8000858 <MX_GPIO_Init+0x17c>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a46      	ldr	r2, [pc, #280]	; (8000858 <MX_GPIO_Init+0x17c>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b44      	ldr	r3, [pc, #272]	; (8000858 <MX_GPIO_Init+0x17c>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MESP_EN_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2121      	movs	r1, #33	; 0x21
 8000756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075a:	f001 f91b 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_VERDE_GPIO_Port, GPIO_LED_VERDE_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	483e      	ldr	r0, [pc, #248]	; (800085c <MX_GPIO_Init+0x180>)
 8000764:	f001 f916 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_ROJO_GPIO_Port, GPIO_LED_ROJO_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2140      	movs	r1, #64	; 0x40
 800076c:	483c      	ldr	r0, [pc, #240]	; (8000860 <MX_GPIO_Init+0x184>)
 800076e:	f001 f911 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000778:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	4834      	ldr	r0, [pc, #208]	; (800085c <MX_GPIO_Init+0x180>)
 800078a:	f000 ff89 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
 800078e:	2303      	movs	r3, #3
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000792:	2312      	movs	r3, #18
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800079e:	2304      	movs	r3, #4
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	482c      	ldr	r0, [pc, #176]	; (800085c <MX_GPIO_Init+0x180>)
 80007aa:	f000 ff79 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MESP_EN_Pin|LD4_Pin;
 80007ae:	2321      	movs	r3, #33	; 0x21
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f000 ff6a 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_BOTON_Pin;
 80007cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_BOTON_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	481f      	ldr	r0, [pc, #124]	; (8000860 <MX_GPIO_Init+0x184>)
 80007e4:	f000 ff5c 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_LED_VERDE_Pin;
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_LED_VERDE_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	4817      	ldr	r0, [pc, #92]	; (800085c <MX_GPIO_Init+0x180>)
 8000800:	f000 ff4e 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_INT_Pin;
 8000804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR_INT_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081e:	f000 ff3f 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_LED_ROJO_Pin;
 8000822:	2340      	movs	r3, #64	; 0x40
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_LED_ROJO_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4809      	ldr	r0, [pc, #36]	; (8000860 <MX_GPIO_Init+0x184>)
 800083a:	f000 ff31 	bl	80016a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2101      	movs	r1, #1
 8000842:	2028      	movs	r0, #40	; 0x28
 8000844:	f000 fe77 	bl	8001536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000848:	2028      	movs	r0, #40	; 0x28
 800084a:	f000 fe90 	bl	800156e <HAL_NVIC_EnableIRQ>

}
 800084e:	bf00      	nop
 8000850:	3728      	adds	r7, #40	; 0x28
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000
 800085c:	48000800 	.word	0x48000800
 8000860:	48000400 	.word	0x48000400

08000864 <HAL_GPIO_EXTI_Callback>:
extern int ESP_OK;
extern int ESP_READY;
extern int count;
uint8_t rx_buffer [50];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	80fb      	strh	r3, [r7, #6]
	// Interrupción desde el botón de la Shield
	if ((GPIO_Pin == GPIO_BOTON_Pin) && (estado==CONECTADO)){ //Ante interrupción del botón, cambiar flag BTN a 1 cuando corresponda
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000874:	d106      	bne.n	8000884 <HAL_GPIO_EXTI_Callback+0x20>
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_GPIO_EXTI_Callback+0x34>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d102      	bne.n	8000884 <HAL_GPIO_EXTI_Callback+0x20>
		BTN=1;
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <HAL_GPIO_EXTI_Callback+0x38>)
 8000880:	2201      	movs	r2, #1
 8000882:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &msg, 1);
 8000884:	2201      	movs	r2, #1
 8000886:	4906      	ldr	r1, [pc, #24]	; (80008a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000888:	4806      	ldr	r0, [pc, #24]	; (80008a4 <HAL_GPIO_EXTI_Callback+0x40>)
 800088a:	f003 fb89 	bl	8003fa0 <HAL_UART_Receive_IT>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000c2 	.word	0x200000c2
 800089c:	200000c4 	.word	0x200000c4
 80008a0:	200000c8 	.word	0x200000c8
 80008a4:	2000012c 	.word	0x2000012c

080008a8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 if(huart->Instance == USART1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a5b      	ldr	r2, [pc, #364]	; (8000a24 <HAL_UART_RxCpltCallback+0x17c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	f040 80a3 	bne.w	8000a02 <HAL_UART_RxCpltCallback+0x15a>
 {
	 rx_buffer[count]=msg;
 80008bc:	4b5a      	ldr	r3, [pc, #360]	; (8000a28 <HAL_UART_RxCpltCallback+0x180>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a5a      	ldr	r2, [pc, #360]	; (8000a2c <HAL_UART_RxCpltCallback+0x184>)
 80008c2:	7811      	ldrb	r1, [r2, #0]
 80008c4:	4a5a      	ldr	r2, [pc, #360]	; (8000a30 <HAL_UART_RxCpltCallback+0x188>)
 80008c6:	54d1      	strb	r1, [r2, r3]
	 count++;
 80008c8:	4b57      	ldr	r3, [pc, #348]	; (8000a28 <HAL_UART_RxCpltCallback+0x180>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	4a56      	ldr	r2, [pc, #344]	; (8000a28 <HAL_UART_RxCpltCallback+0x180>)
 80008d0:	6013      	str	r3, [r2, #0]

	 if (strstr(rx_buffer,"WIFI DISCONNECT")!=NULL){
 80008d2:	4958      	ldr	r1, [pc, #352]	; (8000a34 <HAL_UART_RxCpltCallback+0x18c>)
 80008d4:	4856      	ldr	r0, [pc, #344]	; (8000a30 <HAL_UART_RxCpltCallback+0x188>)
 80008d6:	f004 fe1b 	bl	8005510 <strstr>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d00a      	beq.n	80008f6 <HAL_UART_RxCpltCallback+0x4e>
		 //estado=PERDIO_CONEXION;
		 responder=1;
 80008e0:	4b55      	ldr	r3, [pc, #340]	; (8000a38 <HAL_UART_RxCpltCallback+0x190>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	601a      	str	r2, [r3, #0]
		 count=0;
 80008e6:	4b50      	ldr	r3, [pc, #320]	; (8000a28 <HAL_UART_RxCpltCallback+0x180>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
		 memset(rx_buffer,'\0',sizeof(rx_buffer));
 80008ec:	2232      	movs	r2, #50	; 0x32
 80008ee:	2100      	movs	r1, #0
 80008f0:	484f      	ldr	r0, [pc, #316]	; (8000a30 <HAL_UART_RxCpltCallback+0x188>)
 80008f2:	f004 fde5 	bl	80054c0 <memset>
		 responder=3;
		count=0;
		memset(rx_buffer,'\0',sizeof(rx_buffer));
	 }*/

	 switch(estado){
 80008f6:	4b51      	ldr	r3, [pc, #324]	; (8000a3c <HAL_UART_RxCpltCallback+0x194>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b05      	cmp	r3, #5
 80008fc:	f200 8088 	bhi.w	8000a10 <HAL_UART_RxCpltCallback+0x168>
 8000900:	a201      	add	r2, pc, #4	; (adr r2, 8000908 <HAL_UART_RxCpltCallback+0x60>)
 8000902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000906:	bf00      	nop
 8000908:	08000921 	.word	0x08000921
 800090c:	0800096b 	.word	0x0800096b
 8000910:	08000a11 	.word	0x08000a11
 8000914:	080009b7 	.word	0x080009b7
 8000918:	08000a11 	.word	0x08000a11
 800091c:	08000a11 	.word	0x08000a11
	 	 case WAIT_ESP:
	 		if (strstr(rx_buffer,"ready")!=NULL){
 8000920:	4947      	ldr	r1, [pc, #284]	; (8000a40 <HAL_UART_RxCpltCallback+0x198>)
 8000922:	4843      	ldr	r0, [pc, #268]	; (8000a30 <HAL_UART_RxCpltCallback+0x188>)
 8000924:	f004 fdf4 	bl	8005510 <strstr>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d00a      	beq.n	8000944 <HAL_UART_RxCpltCallback+0x9c>
	 			ESP_OK=1;
 800092e:	4b45      	ldr	r3, [pc, #276]	; (8000a44 <HAL_UART_RxCpltCallback+0x19c>)
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]
	 			count=0;
 8000934:	4b3c      	ldr	r3, [pc, #240]	; (8000a28 <HAL_UART_RxCpltCallback+0x180>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
	 			memset(rx_buffer,'\0',sizeof(rx_buffer));
 800093a:	2232      	movs	r2, #50	; 0x32
 800093c:	2100      	movs	r1, #0
 800093e:	483c      	ldr	r0, [pc, #240]	; (8000a30 <HAL_UART_RxCpltCallback+0x188>)
 8000940:	f004 fdbe 	bl	80054c0 <memset>
	 		}
	 		if (strstr(rx_buffer,"OK")!=NULL){
 8000944:	4940      	ldr	r1, [pc, #256]	; (8000a48 <HAL_UART_RxCpltCallback+0x1a0>)
 8000946:	483a      	ldr	r0, [pc, #232]	; (8000a30 <HAL_UART_RxCpltCallback+0x188>)
 8000948:	f004 fde2 	bl	8005510 <strstr>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d059      	beq.n	8000a06 <HAL_UART_RxCpltCallback+0x15e>
				ESP_READY=1;
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_UART_RxCpltCallback+0x1a4>)
 8000954:	2201      	movs	r2, #1
 8000956:	601a      	str	r2, [r3, #0]
				count=0;
 8000958:	4b33      	ldr	r3, [pc, #204]	; (8000a28 <HAL_UART_RxCpltCallback+0x180>)
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
				memset(rx_buffer,'\0',sizeof(rx_buffer));
 800095e:	2232      	movs	r2, #50	; 0x32
 8000960:	2100      	movs	r1, #0
 8000962:	4833      	ldr	r0, [pc, #204]	; (8000a30 <HAL_UART_RxCpltCallback+0x188>)
 8000964:	f004 fdac 	bl	80054c0 <memset>
	 		}

	 		break;
 8000968:	e04d      	b.n	8000a06 <HAL_UART_RxCpltCallback+0x15e>
	 	case ESTABLECER_CONEXION_WI_FI:
	 		if (strstr(rx_buffer,"OK")!=NULL){
 800096a:	4937      	ldr	r1, [pc, #220]	; (8000a48 <HAL_UART_RxCpltCallback+0x1a0>)
 800096c:	4830      	ldr	r0, [pc, #192]	; (8000a30 <HAL_UART_RxCpltCallback+0x188>)
 800096e:	f004 fdcf 	bl	8005510 <strstr>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00b      	beq.n	8000990 <HAL_UART_RxCpltCallback+0xe8>
	 			esp_connect=OK;
 8000978:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <HAL_UART_RxCpltCallback+0x1a8>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
				count=0;
 800097e:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <HAL_UART_RxCpltCallback+0x180>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
				memset(rx_buffer,'\0',sizeof(rx_buffer));
 8000984:	2232      	movs	r2, #50	; 0x32
 8000986:	2100      	movs	r1, #0
 8000988:	4829      	ldr	r0, [pc, #164]	; (8000a30 <HAL_UART_RxCpltCallback+0x188>)
 800098a:	f004 fd99 	bl	80054c0 <memset>
	 			esp_connect=FAIL;
	 			//intentos++;
				count=0;
				memset(rx_buffer,'\0',sizeof(rx_buffer));
	 		}
	 		break;
 800098e:	e03c      	b.n	8000a0a <HAL_UART_RxCpltCallback+0x162>
	 		else if (strstr(rx_buffer,"ERROR")!=NULL){
 8000990:	4930      	ldr	r1, [pc, #192]	; (8000a54 <HAL_UART_RxCpltCallback+0x1ac>)
 8000992:	4827      	ldr	r0, [pc, #156]	; (8000a30 <HAL_UART_RxCpltCallback+0x188>)
 8000994:	f004 fdbc 	bl	8005510 <strstr>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d035      	beq.n	8000a0a <HAL_UART_RxCpltCallback+0x162>
	 			esp_connect=FAIL;
 800099e:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <HAL_UART_RxCpltCallback+0x1a8>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
				count=0;
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_UART_RxCpltCallback+0x180>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
				memset(rx_buffer,'\0',sizeof(rx_buffer));
 80009aa:	2232      	movs	r2, #50	; 0x32
 80009ac:	2100      	movs	r1, #0
 80009ae:	4820      	ldr	r0, [pc, #128]	; (8000a30 <HAL_UART_RxCpltCallback+0x188>)
 80009b0:	f004 fd86 	bl	80054c0 <memset>
	 		break;
 80009b4:	e029      	b.n	8000a0a <HAL_UART_RxCpltCallback+0x162>
	 	case ENVIAR_DATOS:
			if (strstr(rx_buffer,"OK")!=NULL){
 80009b6:	4924      	ldr	r1, [pc, #144]	; (8000a48 <HAL_UART_RxCpltCallback+0x1a0>)
 80009b8:	481d      	ldr	r0, [pc, #116]	; (8000a30 <HAL_UART_RxCpltCallback+0x188>)
 80009ba:	f004 fda9 	bl	8005510 <strstr>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d00b      	beq.n	80009dc <HAL_UART_RxCpltCallback+0x134>
				esp_envio=OK;
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <HAL_UART_RxCpltCallback+0x1b0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
				count=0;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_UART_RxCpltCallback+0x180>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
				memset(rx_buffer,'\0',sizeof(rx_buffer));
 80009d0:	2232      	movs	r2, #50	; 0x32
 80009d2:	2100      	movs	r1, #0
 80009d4:	4816      	ldr	r0, [pc, #88]	; (8000a30 <HAL_UART_RxCpltCallback+0x188>)
 80009d6:	f004 fd73 	bl	80054c0 <memset>
				esp_envio=FAIL;
				count=0;
				memset(rx_buffer,'\0',sizeof(rx_buffer));
			}
			//no entendí estado de else if (BTN)
			break;
 80009da:	e018      	b.n	8000a0e <HAL_UART_RxCpltCallback+0x166>
			else if (strstr(rx_buffer,"ERROR")!=NULL){
 80009dc:	491d      	ldr	r1, [pc, #116]	; (8000a54 <HAL_UART_RxCpltCallback+0x1ac>)
 80009de:	4814      	ldr	r0, [pc, #80]	; (8000a30 <HAL_UART_RxCpltCallback+0x188>)
 80009e0:	f004 fd96 	bl	8005510 <strstr>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d011      	beq.n	8000a0e <HAL_UART_RxCpltCallback+0x166>
				esp_envio=FAIL;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <HAL_UART_RxCpltCallback+0x1b0>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
				count=0;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <HAL_UART_RxCpltCallback+0x180>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
				memset(rx_buffer,'\0',sizeof(rx_buffer));
 80009f6:	2232      	movs	r2, #50	; 0x32
 80009f8:	2100      	movs	r1, #0
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <HAL_UART_RxCpltCallback+0x188>)
 80009fc:	f004 fd60 	bl	80054c0 <memset>
			break;
 8000a00:	e005      	b.n	8000a0e <HAL_UART_RxCpltCallback+0x166>
	 		 count=0;
	 		 memset(rx_buffer,'\0',sizeof(rx_buffer));
	 	 }
*/

 }
 8000a02:	bf00      	nop
 8000a04:	e004      	b.n	8000a10 <HAL_UART_RxCpltCallback+0x168>
	 		break;
 8000a06:	bf00      	nop
 8000a08:	e002      	b.n	8000a10 <HAL_UART_RxCpltCallback+0x168>
	 		break;
 8000a0a:	bf00      	nop
 8000a0c:	e000      	b.n	8000a10 <HAL_UART_RxCpltCallback+0x168>
			break;
 8000a0e:	bf00      	nop
 HAL_UART_Receive_IT(&huart1, (uint8_t*) &msg, 1); //activate UART receive interrupt
 8000a10:	2201      	movs	r2, #1
 8000a12:	4906      	ldr	r1, [pc, #24]	; (8000a2c <HAL_UART_RxCpltCallback+0x184>)
 8000a14:	4811      	ldr	r0, [pc, #68]	; (8000a5c <HAL_UART_RxCpltCallback+0x1b4>)
 8000a16:	f003 fac3 	bl	8003fa0 <HAL_UART_Receive_IT>

}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40013800 	.word	0x40013800
 8000a28:	200000d8 	.word	0x200000d8
 8000a2c:	200000c8 	.word	0x200000c8
 8000a30:	20000090 	.word	0x20000090
 8000a34:	08005e98 	.word	0x08005e98
 8000a38:	200000cc 	.word	0x200000cc
 8000a3c:	200000c2 	.word	0x200000c2
 8000a40:	08005ea8 	.word	0x08005ea8
 8000a44:	200000d0 	.word	0x200000d0
 8000a48:	08005eb0 	.word	0x08005eb0
 8000a4c:	200000d4 	.word	0x200000d4
 8000a50:	20000000 	.word	0x20000000
 8000a54:	08005eb4 	.word	0x08005eb4
 8000a58:	20000001 	.word	0x20000001
 8000a5c:	2000012c 	.word	0x2000012c

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//enum ESTADO estado=WAIT_ESP;		//Variable que identifica el estado del sistema (FSM).
	int intentos=0;						//Contador de intentos de conexión.
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
	enum LEDS leds=OFF;					//estado de los leds de estado.
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	71fb      	strb	r3, [r7, #7]
							//1 para ESP lista para trabajar, 0 eoc.
	//int BTN=0;							//1 si se resionó el botón, 0 eoc.
	int reconexion=0;					//1 si se intenta reconexión, 0 eoc.
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
	chg_led_state(leds);				//al iniciar el sistema se apagan los leds (estado de WAIT_ESP)
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fde9 	bl	800064c <chg_led_state>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7a:	f000 fbe1 	bl	8001240 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7e:	f000 f8f1 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a82:	f7ff fe2b 	bl	80006dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a86:	f000 facf 	bl	8001028 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000a8a:	f000 fa9d 	bl	8000fc8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000a8e:	f000 f9ff 	bl	8000e90 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, (uint8_t*) &msg, 1);
 8000a92:	2201      	movs	r2, #1
 8000a94:	496a      	ldr	r1, [pc, #424]	; (8000c40 <main+0x1e0>)
 8000a96:	486b      	ldr	r0, [pc, #428]	; (8000c44 <main+0x1e4>)
 8000a98:	f003 fa82 	bl	8003fa0 <HAL_UART_Receive_IT>
  while (1){
	  switch(estado){
 8000a9c:	4b6a      	ldr	r3, [pc, #424]	; (8000c48 <main+0x1e8>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b05      	cmp	r3, #5
 8000aa2:	d8fb      	bhi.n	8000a9c <main+0x3c>
 8000aa4:	a201      	add	r2, pc, #4	; (adr r2, 8000aac <main+0x4c>)
 8000aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aaa:	bf00      	nop
 8000aac:	08000ac5 	.word	0x08000ac5
 8000ab0:	08000af9 	.word	0x08000af9
 8000ab4:	08000ba1 	.word	0x08000ba1
 8000ab8:	08000bcf 	.word	0x08000bcf
 8000abc:	08000bfb 	.word	0x08000bfb
 8000ac0:	08000c1d 	.word	0x08000c1d
	  	  case WAIT_ESP:
	  		  if(ESP_OK){
 8000ac4:	4b61      	ldr	r3, [pc, #388]	; (8000c4c <main+0x1ec>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f000 80b1 	beq.w	8000c30 <main+0x1d0>
		  		  reconexion=0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
	  			  intentos=0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
	  			  esp_connect=FAIL;
 8000ad6:	4b5e      	ldr	r3, [pc, #376]	; (8000c50 <main+0x1f0>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]
	  			  //mandar comando AT para conexión
	  			  setModeToStation();
 8000adc:	f7ff fd5a 	bl	8000594 <setModeToStation>
	  			  if(ESP_READY==1){
 8000ae0:	4b5c      	ldr	r3, [pc, #368]	; (8000c54 <main+0x1f4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	f040 80a3 	bne.w	8000c30 <main+0x1d0>
	  				estado=ESTABLECER_CONEXION_WI_FI;
 8000aea:	4b57      	ldr	r3, [pc, #348]	; (8000c48 <main+0x1e8>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
	  				ESP_READY=0;
 8000af0:	4b58      	ldr	r3, [pc, #352]	; (8000c54 <main+0x1f4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
	  			  }
	  			  //HAL_UART_Transmit(&huart1, "test\n", 5, 1000);

	  		  }
			  break;
 8000af6:	e09b      	b.n	8000c30 <main+0x1d0>
	  	  case ESTABLECER_CONEXION_WI_FI:
			leds=OFF;
 8000af8:	2303      	movs	r3, #3
 8000afa:	71fb      	strb	r3, [r7, #7]
	  		chg_led_state(leds);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fda4 	bl	800064c <chg_led_state>
	  		  if((intentos<3)&&(esp_connect==FAIL)){		//3 intentos para establecer conexión
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	dc0f      	bgt.n	8000b2a <main+0xca>
 8000b0a:	4b51      	ldr	r3, [pc, #324]	; (8000c50 <main+0x1f0>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d10b      	bne.n	8000b2a <main+0xca>
	  			  //mandar comando AT para conexión
	  			  setAPcnx();
 8000b12:	f7ff fd4d 	bl	80005b0 <setAPcnx>
	  			  intentos+=1;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
	  			  if (intentos != 3){
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d03c      	beq.n	8000b9c <main+0x13c>
	  				  esp_connect=WAIT;
 8000b22:	4b4b      	ldr	r3, [pc, #300]	; (8000c50 <main+0x1f0>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	701a      	strb	r2, [r3, #0]
	  		  if((intentos<3)&&(esp_connect==FAIL)){		//3 intentos para establecer conexión
 8000b28:	e038      	b.n	8000b9c <main+0x13c>
	  			  }
	  		  }
	  		  else if((esp_connect==OK)&&(reconexion==0)){	//Correcta conexión por primera vez
 8000b2a:	4b49      	ldr	r3, [pc, #292]	; (8000c50 <main+0x1f0>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d10c      	bne.n	8000b4c <main+0xec>
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d109      	bne.n	8000b4c <main+0xec>
	  		  	  leds=CONEXION_EXITOSA;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	71fb      	strb	r3, [r7, #7]
	  			  chg_led_state(leds);
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fd84 	bl	800064c <chg_led_state>
	  			  estado=CONECTADO;
 8000b44:	4b40      	ldr	r3, [pc, #256]	; (8000c48 <main+0x1e8>)
 8000b46:	2202      	movs	r2, #2
 8000b48:	701a      	strb	r2, [r3, #0]
 8000b4a:	e028      	b.n	8000b9e <main+0x13e>
	  		  }
	  		  else if((esp_connect==OK)&&(reconexion==1)){	//Reconexión para volver a intentar el envío de datos
 8000b4c:	4b40      	ldr	r3, [pc, #256]	; (8000c50 <main+0x1f0>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10f      	bne.n	8000b74 <main+0x114>
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d10c      	bne.n	8000b74 <main+0x114>
	  			  leds=BUSY;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	71fb      	strb	r3, [r7, #7]
	  			  chg_led_state(leds);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fd73 	bl	800064c <chg_led_state>
	  			  esp_envio=WAIT;
 8000b66:	4b3c      	ldr	r3, [pc, #240]	; (8000c58 <main+0x1f8>)
 8000b68:	2202      	movs	r2, #2
 8000b6a:	701a      	strb	r2, [r3, #0]
	  			  estado=ENVIAR_DATOS;
 8000b6c:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <main+0x1e8>)
 8000b6e:	2203      	movs	r2, #3
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e014      	b.n	8000b9e <main+0x13e>
	  		  }
	  		  else if((esp_connect==FAIL)&&(intentos==3)){	//Falla la conexión, se reinicia la ESP
 8000b74:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <main+0x1f0>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d15b      	bne.n	8000c34 <main+0x1d4>
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d158      	bne.n	8000c34 <main+0x1d4>
	  			  //no reset ESP
	  			  ESP_OK=0;
 8000b82:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <main+0x1ec>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
	  			  leds=FALLO_CRITICO;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	71fb      	strb	r3, [r7, #7]
	  			  chg_led_state(leds);
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fd5c 	bl	800064c <chg_led_state>
	  			  estado=FALLO_CONEXION;
 8000b94:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <main+0x1e8>)
 8000b96:	2205      	movs	r2, #5
 8000b98:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8000b9a:	e04b      	b.n	8000c34 <main+0x1d4>
	  		  if((intentos<3)&&(esp_connect==FAIL)){		//3 intentos para establecer conexión
 8000b9c:	bf00      	nop
	  		  break;
 8000b9e:	e049      	b.n	8000c34 <main+0x1d4>
	  	  case CONECTADO:
	  		  if(BTN){//Hay que recolectar y enviar datos
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <main+0x1fc>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d047      	beq.n	8000c38 <main+0x1d8>
	  			  leds=BUSY;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	71fb      	strb	r3, [r7, #7]
	  			  chg_led_state(leds);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fd4c 	bl	800064c <chg_led_state>
	  			  //lee sensor
	  			  //enviar datos
	  			  sendSensorData((uint8_t*)"150");
 8000bb4:	482a      	ldr	r0, [pc, #168]	; (8000c60 <main+0x200>)
 8000bb6:	f7ff fd09 	bl	80005cc <sendSensorData>
	  			  esp_envio=WAIT;
 8000bba:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <main+0x1f8>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	701a      	strb	r2, [r3, #0]
	  			  BTN=0;
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <main+0x1fc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
	  			  estado=ENVIAR_DATOS;
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <main+0x1e8>)
 8000bc8:	2203      	movs	r2, #3
 8000bca:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8000bcc:	e034      	b.n	8000c38 <main+0x1d8>
	  	  case ENVIAR_DATOS:
				//if(BTN){
					//Envío datos
					//BTN=0;
				//}
	  		  if(esp_envio==OK){//se enviaron correctamente los datos
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <main+0x1f8>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d109      	bne.n	8000bea <main+0x18a>
	  			  leds=CONEXION_EXITOSA;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	  			  chg_led_state(leds);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fd35 	bl	800064c <chg_led_state>
	  			  estado=CONECTADO;
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <main+0x1e8>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	701a      	strb	r2, [r3, #0]
	  			  //leds=FALLO_CRITICO;
	  			  //chg_led_state(leds);
	  			  estado=PERDIO_CONEXION;
	  		  }
	  		  
	  		  break;
 8000be8:	e028      	b.n	8000c3c <main+0x1dc>
	  		  else if(esp_envio==FAIL){//Fallo al enviar datos
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <main+0x1f8>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d124      	bne.n	8000c3c <main+0x1dc>
	  			  estado=PERDIO_CONEXION;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <main+0x1e8>)
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000bf8:	e020      	b.n	8000c3c <main+0x1dc>
	  	  case PERDIO_CONEXION:
			leds=FALLO_CRITICO;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	71fb      	strb	r3, [r7, #7]
	  		chg_led_state(leds);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fd23 	bl	800064c <chg_led_state>
	  		  reconexion=1;
 8000c06:	2301      	movs	r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
	  		//  leds=OFF;
	  		//  chg_led_state(leds);
	  		  esp_connect=WAIT;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <main+0x1f0>)
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	701a      	strb	r2, [r3, #0]
	  		  intentos=0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
	  		  estado=ESTABLECER_CONEXION_WI_FI;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <main+0x1e8>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]

	  		  break;
 8000c1a:	e010      	b.n	8000c3e <main+0x1de>
	  	  case FALLO_CONEXION:
			HAL_Delay(1000);
 8000c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c20:	f000 fb8a 	bl	8001338 <HAL_Delay>
			//reset ESP
			resetModule();
 8000c24:	f7ff fd04 	bl	8000630 <resetModule>
			estado=WAIT_ESP;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <main+0x1e8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
	  		  if(ESP_OK){//Se reseteó correctamente la ESP
	  			  leds=OFF;
	  			  chg_led_state(leds);
	  			  estado=WAIT_ESP;
	  		  } */
	  		break;
 8000c2e:	e006      	b.n	8000c3e <main+0x1de>
			  break;
 8000c30:	bf00      	nop
 8000c32:	e733      	b.n	8000a9c <main+0x3c>
	  		  break;
 8000c34:	bf00      	nop
 8000c36:	e731      	b.n	8000a9c <main+0x3c>
	  		  break;
 8000c38:	bf00      	nop
 8000c3a:	e72f      	b.n	8000a9c <main+0x3c>
	  		  break;
 8000c3c:	bf00      	nop
	  switch(estado){
 8000c3e:	e72d      	b.n	8000a9c <main+0x3c>
 8000c40:	200000c8 	.word	0x200000c8
 8000c44:	2000012c 	.word	0x2000012c
 8000c48:	200000c2 	.word	0x200000c2
 8000c4c:	200000d0 	.word	0x200000d0
 8000c50:	20000000 	.word	0x20000000
 8000c54:	200000d4 	.word	0x200000d4
 8000c58:	20000001 	.word	0x20000001
 8000c5c:	200000c4 	.word	0x200000c4
 8000c60:	08005ebc 	.word	0x08005ebc

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b096      	sub	sp, #88	; 0x58
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	2244      	movs	r2, #68	; 0x44
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f004 fc24 	bl	80054c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c8a:	f000 fec1 	bl	8001a10 <HAL_PWREx_ControlVoltageScaling>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c94:	f000 f837 	bl	8000d06 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca2:	2340      	movs	r3, #64	; 0x40
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000caa:	2302      	movs	r3, #2
 8000cac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fef8 	bl	8001abc <HAL_RCC_OscConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000cd2:	f000 f818 	bl	8000d06 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	2104      	movs	r1, #4
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 faf8 	bl	80022e4 <HAL_RCC_ClockConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cfa:	f000 f804 	bl	8000d06 <Error_Handler>
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3758      	adds	r7, #88	; 0x58
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0a:	b672      	cpsid	i
}
 8000d0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <Error_Handler+0x8>

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_MspInit+0x44>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_MspInit+0x44>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6613      	str	r3, [r2, #96]	; 0x60
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_MspInit+0x44>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x44>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x44>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x44>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da4:	f000 faa8 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <TIM3_IRQHandler+0x10>)
 8000db2:	f002 f8d1 	bl	8002f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200000e0 	.word	0x200000e0

08000dc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <USART1_IRQHandler+0x10>)
 8000dc6:	f003 f941 	bl	800404c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000012c 	.word	0x2000012c

08000dd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <USART2_IRQHandler+0x10>)
 8000dda:	f003 f937 	bl	800404c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200001b0 	.word	0x200001b0

08000de8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_BOTON_Pin);
 8000dec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000df0:	f000 fde8 	bl	80019c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000df4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000df8:	f000 fde4 	bl	80019c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f004 fb1c 	bl	800546c <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20028000 	.word	0x20028000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	200000dc 	.word	0x200000dc
 8000e68:	20000248 	.word	0x20000248

08000e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08e      	sub	sp, #56	; 0x38
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <MX_TIM3_Init+0xe4>)
 8000ec4:	4a2c      	ldr	r2, [pc, #176]	; (8000f78 <MX_TIM3_Init+0xe8>)
 8000ec6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39999;
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <MX_TIM3_Init+0xe4>)
 8000eca:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000ece:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <MX_TIM3_Init+0xe4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000ed6:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <MX_TIM3_Init+0xe4>)
 8000ed8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000edc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <MX_TIM3_Init+0xe4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <MX_TIM3_Init+0xe4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eea:	4822      	ldr	r0, [pc, #136]	; (8000f74 <MX_TIM3_Init+0xe4>)
 8000eec:	f001 ff7c 	bl	8002de8 <HAL_TIM_Base_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000ef6:	f7ff ff06 	bl	8000d06 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f04:	4619      	mov	r1, r3
 8000f06:	481b      	ldr	r0, [pc, #108]	; (8000f74 <MX_TIM3_Init+0xe4>)
 8000f08:	f002 fa5a 	bl	80033c0 <HAL_TIM_ConfigClockSource>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000f12:	f7ff fef8 	bl	8000d06 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f16:	4817      	ldr	r0, [pc, #92]	; (8000f74 <MX_TIM3_Init+0xe4>)
 8000f18:	f001 ffbd 	bl	8002e96 <HAL_TIM_PWM_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000f22:	f7ff fef0 	bl	8000d06 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	480f      	ldr	r0, [pc, #60]	; (8000f74 <MX_TIM3_Init+0xe4>)
 8000f36:	f002 fec5 	bl	8003cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000f40:	f7ff fee1 	bl	8000d06 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f44:	2360      	movs	r3, #96	; 0x60
 8000f46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <MX_TIM3_Init+0xe4>)
 8000f5c:	f002 f91c 	bl	8003198 <HAL_TIM_PWM_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000f66:	f7ff fece 	bl	8000d06 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	3738      	adds	r7, #56	; 0x38
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000e0 	.word	0x200000e0
 8000f78:	40000400 	.word	0x40000400

08000f7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <HAL_TIM_Base_MspInit+0x44>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d113      	bne.n	8000fb6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_TIM_Base_MspInit+0x48>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <HAL_TIM_Base_MspInit+0x48>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6593      	str	r3, [r2, #88]	; 0x58
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_TIM_Base_MspInit+0x48>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	201d      	movs	r0, #29
 8000fac:	f000 fac3 	bl	8001536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fb0:	201d      	movs	r0, #29
 8000fb2:	f000 fadc 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40000400 	.word	0x40000400
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_USART1_UART_Init+0x58>)
 8000fce:	4a15      	ldr	r2, [pc, #84]	; (8001024 <MX_USART1_UART_Init+0x5c>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_USART1_UART_Init+0x58>)
 8000fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_USART1_UART_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_USART1_UART_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_USART1_UART_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_USART1_UART_Init+0x58>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_USART1_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_USART1_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_USART1_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_USART1_UART_Init+0x58>)
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_USART1_UART_Init+0x58>)
 800100c:	f002 fee6 	bl	8003ddc <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001016:	f7ff fe76 	bl	8000d06 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000012c 	.word	0x2000012c
 8001024:	40013800 	.word	0x40013800

08001028 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_USART2_UART_Init+0x58>)
 800102e:	4a15      	ldr	r2, [pc, #84]	; (8001084 <MX_USART2_UART_Init+0x5c>)
 8001030:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <MX_USART2_UART_Init+0x58>)
 8001034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001038:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_USART2_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_USART2_UART_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_USART2_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_USART2_UART_Init+0x58>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_USART2_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_USART2_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_USART2_UART_Init+0x58>)
 800106c:	f002 feb6 	bl	8003ddc <HAL_UART_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001076:	f7ff fe46 	bl	8000d06 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200001b0 	.word	0x200001b0
 8001084:	40004400 	.word	0x40004400

08001088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0a6      	sub	sp, #152	; 0x98
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	2268      	movs	r2, #104	; 0x68
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f004 fa09 	bl	80054c0 <memset>
  if(uartHandle->Instance==USART1)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a4b      	ldr	r2, [pc, #300]	; (80011e0 <HAL_UART_MspInit+0x158>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d145      	bne.n	8001144 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010bc:	2300      	movs	r3, #0
 80010be:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fb31 	bl	800272c <HAL_RCCEx_PeriphCLKConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010d0:	f7ff fe19 	bl	8000d06 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010d4:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 80010d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d8:	4a42      	ldr	r2, [pc, #264]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 80010da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010de:	6613      	str	r3, [r2, #96]	; 0x60
 80010e0:	4b40      	ldr	r3, [pc, #256]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 80010e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	4a3c      	ldr	r2, [pc, #240]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f8:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_STM_Pin|RX_STM_Pin;
 8001104:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800111e:	2307      	movs	r3, #7
 8001120:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001128:	4619      	mov	r1, r3
 800112a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112e:	f000 fab7 	bl	80016a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	2025      	movs	r0, #37	; 0x25
 8001138:	f000 f9fd 	bl	8001536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800113c:	2025      	movs	r0, #37	; 0x25
 800113e:	f000 fa16 	bl	800156e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001142:	e048      	b.n	80011d6 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a27      	ldr	r2, [pc, #156]	; (80011e8 <HAL_UART_MspInit+0x160>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d143      	bne.n	80011d6 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800114e:	2302      	movs	r3, #2
 8001150:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001152:	2300      	movs	r3, #0
 8001154:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fae6 	bl	800272c <HAL_RCCEx_PeriphCLKConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001166:	f7ff fdce 	bl	8000d06 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 800116c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116e:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	6593      	str	r3, [r2, #88]	; 0x58
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_UART_MspInit+0x15c>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800119a:	230c      	movs	r3, #12
 800119c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b2:	2307      	movs	r3, #7
 80011b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c2:	f000 fa6d 	bl	80016a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	2026      	movs	r0, #38	; 0x26
 80011cc:	f000 f9b3 	bl	8001536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011d0:	2026      	movs	r0, #38	; 0x26
 80011d2:	f000 f9cc 	bl	800156e <HAL_NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3798      	adds	r7, #152	; 0x98
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40013800 	.word	0x40013800
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40004400 	.word	0x40004400

080011ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001224 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f0:	f7ff fe3c 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <LoopForever+0x6>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	; (800122c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <LoopForever+0xe>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	; (8001238 <LoopForever+0x16>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121a:	f004 f92d 	bl	8005478 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121e:	f7ff fc1f 	bl	8000a60 <main>

08001222 <LoopForever>:

LoopForever:
    b LoopForever
 8001222:	e7fe      	b.n	8001222 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001224:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001230:	08005f4c 	.word	0x08005f4c
  ldr r2, =_sbss
 8001234:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001238:	20000248 	.word	0x20000248

0800123c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC1_IRQHandler>
	...

08001240 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_Init+0x3c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <HAL_Init+0x3c>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001254:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001256:	2003      	movs	r0, #3
 8001258:	f000 f962 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f80f 	bl	8001280 <HAL_InitTick>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	e001      	b.n	8001272 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800126e:	f7ff fd4f 	bl	8000d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001272:	79fb      	ldrb	r3, [r7, #7]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40022000 	.word	0x40022000

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_InitTick+0x6c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d023      	beq.n	80012dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <HAL_InitTick+0x70>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_InitTick+0x6c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f96d 	bl	800158a <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10f      	bne.n	80012d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d809      	bhi.n	80012d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f000 f937 	bl	8001536 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <HAL_InitTick+0x74>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e007      	b.n	80012e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e004      	b.n	80012e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e001      	b.n	80012e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000000c 	.word	0x2000000c
 80012f0:	20000004 	.word	0x20000004
 80012f4:	20000008 	.word	0x20000008

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	2000000c 	.word	0x2000000c
 800131c:	20000234 	.word	0x20000234

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000234 	.word	0x20000234

08001338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff ffee 	bl	8001320 <HAL_GetTick>
 8001344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001350:	d005      	beq.n	800135e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_Delay+0x44>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800135e:	bf00      	nop
 8001360:	f7ff ffde 	bl	8001320 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	429a      	cmp	r2, r3
 800136e:	d8f7      	bhi.n	8001360 <HAL_Delay+0x28>
  {
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000000c 	.word	0x2000000c

08001380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	f003 0307 	and.w	r3, r3, #7
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db0b      	blt.n	800140e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	4907      	ldr	r1, [pc, #28]	; (800141c <__NVIC_EnableIRQ+0x38>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	2001      	movs	r0, #1
 8001406:	fa00 f202 	lsl.w	r2, r0, r2
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000e100 	.word	0xe000e100

08001420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	db0a      	blt.n	800144a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	b2da      	uxtb	r2, r3
 8001438:	490c      	ldr	r1, [pc, #48]	; (800146c <__NVIC_SetPriority+0x4c>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	0112      	lsls	r2, r2, #4
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	440b      	add	r3, r1
 8001444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001448:	e00a      	b.n	8001460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4908      	ldr	r1, [pc, #32]	; (8001470 <__NVIC_SetPriority+0x50>)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	3b04      	subs	r3, #4
 8001458:	0112      	lsls	r2, r2, #4
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	440b      	add	r3, r1
 800145e:	761a      	strb	r2, [r3, #24]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f1c3 0307 	rsb	r3, r3, #7
 800148e:	2b04      	cmp	r3, #4
 8001490:	bf28      	it	cs
 8001492:	2304      	movcs	r3, #4
 8001494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3304      	adds	r3, #4
 800149a:	2b06      	cmp	r3, #6
 800149c:	d902      	bls.n	80014a4 <NVIC_EncodePriority+0x30>
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3b03      	subs	r3, #3
 80014a2:	e000      	b.n	80014a6 <NVIC_EncodePriority+0x32>
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	401a      	ands	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	43d9      	mvns	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	4313      	orrs	r3, r2
         );
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ec:	d301      	bcc.n	80014f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00f      	b.n	8001512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <SysTick_Config+0x40>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fa:	210f      	movs	r1, #15
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f7ff ff8e 	bl	8001420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <SysTick_Config+0x40>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <SysTick_Config+0x40>)
 800150c:	2207      	movs	r2, #7
 800150e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	e000e010 	.word	0xe000e010

08001520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff29 	bl	8001380 <__NVIC_SetPriorityGrouping>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff3e 	bl	80013c8 <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff8e 	bl	8001474 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5d 	bl	8001420 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff31 	bl	80013e4 <__NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffa2 	bl	80014dc <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b085      	sub	sp, #20
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d008      	beq.n	80015cc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2204      	movs	r2, #4
 80015be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e022      	b.n	8001612 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 020e 	bic.w	r2, r2, #14
 80015da:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0201 	bic.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	f003 021c 	and.w	r2, r3, #28
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	2101      	movs	r1, #1
 80015fa:	fa01 f202 	lsl.w	r2, r1, r2
 80015fe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d005      	beq.n	8001642 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2204      	movs	r2, #4
 800163a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e029      	b.n	8001696 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 020e 	bic.w	r2, r2, #14
 8001650:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0201 	bic.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f003 021c 	and.w	r2, r3, #28
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	2101      	movs	r1, #1
 8001670:	fa01 f202 	lsl.w	r2, r1, r2
 8001674:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	4798      	blx	r3
    }
  }
  return status;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ae:	e154      	b.n	800195a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8146 	beq.w	8001954 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d005      	beq.n	80016e0 <HAL_GPIO_Init+0x40>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d130      	bne.n	8001742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001716:	2201      	movs	r2, #1
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	f003 0201 	and.w	r2, r3, #1
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b03      	cmp	r3, #3
 800174c:	d017      	beq.n	800177e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d123      	bne.n	80017d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	220f      	movs	r2, #15
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	08da      	lsrs	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	6939      	ldr	r1, [r7, #16]
 80017ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0203 	and.w	r2, r3, #3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 80a0 	beq.w	8001954 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001814:	4b58      	ldr	r3, [pc, #352]	; (8001978 <HAL_GPIO_Init+0x2d8>)
 8001816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001818:	4a57      	ldr	r2, [pc, #348]	; (8001978 <HAL_GPIO_Init+0x2d8>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6613      	str	r3, [r2, #96]	; 0x60
 8001820:	4b55      	ldr	r3, [pc, #340]	; (8001978 <HAL_GPIO_Init+0x2d8>)
 8001822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800182c:	4a53      	ldr	r2, [pc, #332]	; (800197c <HAL_GPIO_Init+0x2dc>)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3302      	adds	r3, #2
 8001834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	220f      	movs	r2, #15
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001856:	d019      	beq.n	800188c <HAL_GPIO_Init+0x1ec>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a49      	ldr	r2, [pc, #292]	; (8001980 <HAL_GPIO_Init+0x2e0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d013      	beq.n	8001888 <HAL_GPIO_Init+0x1e8>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a48      	ldr	r2, [pc, #288]	; (8001984 <HAL_GPIO_Init+0x2e4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00d      	beq.n	8001884 <HAL_GPIO_Init+0x1e4>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a47      	ldr	r2, [pc, #284]	; (8001988 <HAL_GPIO_Init+0x2e8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d007      	beq.n	8001880 <HAL_GPIO_Init+0x1e0>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a46      	ldr	r2, [pc, #280]	; (800198c <HAL_GPIO_Init+0x2ec>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_GPIO_Init+0x1dc>
 8001878:	2304      	movs	r3, #4
 800187a:	e008      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 800187c:	2307      	movs	r3, #7
 800187e:	e006      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 8001880:	2303      	movs	r3, #3
 8001882:	e004      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 8001884:	2302      	movs	r3, #2
 8001886:	e002      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 800188c:	2300      	movs	r3, #0
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	f002 0203 	and.w	r2, r2, #3
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	4093      	lsls	r3, r2
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800189e:	4937      	ldr	r1, [pc, #220]	; (800197c <HAL_GPIO_Init+0x2dc>)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3302      	adds	r3, #2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018ac:	4b38      	ldr	r3, [pc, #224]	; (8001990 <HAL_GPIO_Init+0x2f0>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018d0:	4a2f      	ldr	r2, [pc, #188]	; (8001990 <HAL_GPIO_Init+0x2f0>)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <HAL_GPIO_Init+0x2f0>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018fa:	4a25      	ldr	r2, [pc, #148]	; (8001990 <HAL_GPIO_Init+0x2f0>)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001900:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_GPIO_Init+0x2f0>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001924:	4a1a      	ldr	r2, [pc, #104]	; (8001990 <HAL_GPIO_Init+0x2f0>)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_GPIO_Init+0x2f0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <HAL_GPIO_Init+0x2f0>)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	f47f aea3 	bne.w	80016b0 <HAL_GPIO_Init+0x10>
  }
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	371c      	adds	r7, #28
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	40021000 	.word	0x40021000
 800197c:	40010000 	.word	0x40010000
 8001980:	48000400 	.word	0x48000400
 8001984:	48000800 	.word	0x48000800
 8001988:	48000c00 	.word	0x48000c00
 800198c:	48001000 	.word	0x48001000
 8001990:	40010400 	.word	0x40010400

08001994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a4:	787b      	ldrb	r3, [r7, #1]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe ff3e 	bl	8000864 <HAL_GPIO_EXTI_Callback>
  }
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40010400 	.word	0x40010400

080019f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <HAL_PWREx_GetVoltageRange+0x18>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40007000 	.word	0x40007000

08001a10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a1e:	d130      	bne.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a20:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a2c:	d038      	beq.n	8001aa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a36:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2232      	movs	r2, #50	; 0x32
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	0c9b      	lsrs	r3, r3, #18
 8001a50:	3301      	adds	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a54:	e002      	b.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a68:	d102      	bne.n	8001a70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f2      	bne.n	8001a56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7c:	d110      	bne.n	8001aa0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e00f      	b.n	8001aa2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8e:	d007      	beq.n	8001aa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a98:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	431bde83 	.word	0x431bde83

08001abc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d102      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f000 bc02 	b.w	80022d4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad0:	4b96      	ldr	r3, [pc, #600]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ada:	4b94      	ldr	r3, [pc, #592]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80e4 	beq.w	8001cba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d007      	beq.n	8001b08 <HAL_RCC_OscConfig+0x4c>
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2b0c      	cmp	r3, #12
 8001afc:	f040 808b 	bne.w	8001c16 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	f040 8087 	bne.w	8001c16 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b08:	4b88      	ldr	r3, [pc, #544]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_OscConfig+0x64>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e3d9      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1a      	ldr	r2, [r3, #32]
 8001b24:	4b81      	ldr	r3, [pc, #516]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d004      	beq.n	8001b3a <HAL_RCC_OscConfig+0x7e>
 8001b30:	4b7e      	ldr	r3, [pc, #504]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b38:	e005      	b.n	8001b46 <HAL_RCC_OscConfig+0x8a>
 8001b3a:	4b7c      	ldr	r3, [pc, #496]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d223      	bcs.n	8001b92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 fd8c 	bl	800266c <RCC_SetFlashLatencyFromMSIRange>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e3ba      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b5e:	4b73      	ldr	r3, [pc, #460]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a72      	ldr	r2, [pc, #456]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b70      	ldr	r3, [pc, #448]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	496d      	ldr	r1, [pc, #436]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b7c:	4b6b      	ldr	r3, [pc, #428]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	4968      	ldr	r1, [pc, #416]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
 8001b90:	e025      	b.n	8001bde <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b92:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a65      	ldr	r2, [pc, #404]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b63      	ldr	r3, [pc, #396]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4960      	ldr	r1, [pc, #384]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb0:	4b5e      	ldr	r3, [pc, #376]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	495b      	ldr	r1, [pc, #364]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 fd4c 	bl	800266c <RCC_SetFlashLatencyFromMSIRange>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e37a      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bde:	f000 fc81 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8001be2:	4602      	mov	r2, r0
 8001be4:	4b51      	ldr	r3, [pc, #324]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	4950      	ldr	r1, [pc, #320]	; (8001d30 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	5ccb      	ldrb	r3, [r1, r3]
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfa:	4a4e      	ldr	r2, [pc, #312]	; (8001d34 <HAL_RCC_OscConfig+0x278>)
 8001bfc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bfe:	4b4e      	ldr	r3, [pc, #312]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fb3c 	bl	8001280 <HAL_InitTick>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d052      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	e35e      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d032      	beq.n	8001c84 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c1e:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a42      	ldr	r2, [pc, #264]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c2a:	f7ff fb79 	bl	8001320 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c32:	f7ff fb75 	bl	8001320 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e347      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c44:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c50:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a35      	ldr	r2, [pc, #212]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c56:	f043 0308 	orr.w	r3, r3, #8
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4930      	ldr	r1, [pc, #192]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	492b      	ldr	r1, [pc, #172]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
 8001c82:	e01a      	b.n	8001cba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c84:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a28      	ldr	r2, [pc, #160]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fb46 	bl	8001320 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c98:	f7ff fb42 	bl	8001320 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e314      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001caa:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x1dc>
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d073      	beq.n	8001dae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x21c>
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2b0c      	cmp	r3, #12
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d10b      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d063      	beq.n	8001dac <HAL_RCC_OscConfig+0x2f0>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d15f      	bne.n	8001dac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e2f1      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf8:	d106      	bne.n	8001d08 <HAL_RCC_OscConfig+0x24c>
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e025      	b.n	8001d54 <HAL_RCC_OscConfig+0x298>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d10:	d114      	bne.n	8001d3c <HAL_RCC_OscConfig+0x280>
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a02      	ldr	r2, [pc, #8]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e013      	b.n	8001d54 <HAL_RCC_OscConfig+0x298>
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	08005ec0 	.word	0x08005ec0
 8001d34:	20000004 	.word	0x20000004
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	4ba0      	ldr	r3, [pc, #640]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a9f      	ldr	r2, [pc, #636]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b9d      	ldr	r3, [pc, #628]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a9c      	ldr	r2, [pc, #624]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d013      	beq.n	8001d84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fae0 	bl	8001320 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff fadc 	bl	8001320 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e2ae      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d76:	4b92      	ldr	r3, [pc, #584]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x2a8>
 8001d82:	e014      	b.n	8001dae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff facc 	bl	8001320 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d8c:	f7ff fac8 	bl	8001320 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	; 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e29a      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9e:	4b88      	ldr	r3, [pc, #544]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x2d0>
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d060      	beq.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_OscConfig+0x310>
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	2b0c      	cmp	r3, #12
 8001dc4:	d119      	bne.n	8001dfa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d116      	bne.n	8001dfa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dcc:	4b7c      	ldr	r3, [pc, #496]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_OscConfig+0x328>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e277      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	4b76      	ldr	r3, [pc, #472]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	061b      	lsls	r3, r3, #24
 8001df2:	4973      	ldr	r1, [pc, #460]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df8:	e040      	b.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d023      	beq.n	8001e4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e02:	4b6f      	ldr	r3, [pc, #444]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a6e      	ldr	r2, [pc, #440]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fa87 	bl	8001320 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff fa83 	bl	8001320 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e255      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e28:	4b65      	ldr	r3, [pc, #404]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b62      	ldr	r3, [pc, #392]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	061b      	lsls	r3, r3, #24
 8001e42:	495f      	ldr	r1, [pc, #380]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
 8001e48:	e018      	b.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4a:	4b5d      	ldr	r3, [pc, #372]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a5c      	ldr	r2, [pc, #368]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e56:	f7ff fa63 	bl	8001320 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5e:	f7ff fa5f 	bl	8001320 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e231      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e70:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f0      	bne.n	8001e5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d03c      	beq.n	8001f02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01c      	beq.n	8001eca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e90:	4b4b      	ldr	r3, [pc, #300]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e96:	4a4a      	ldr	r2, [pc, #296]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea0:	f7ff fa3e 	bl	8001320 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7ff fa3a 	bl	8001320 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e20c      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eba:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0ef      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x3ec>
 8001ec8:	e01b      	b.n	8001f02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed0:	4a3b      	ldr	r2, [pc, #236]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eda:	f7ff fa21 	bl	8001320 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fa1d 	bl	8001320 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1ef      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef4:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1ef      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 80a6 	beq.w	800205c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f14:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_RCC_OscConfig+0x508>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d118      	bne.n	8001f7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_RCC_OscConfig+0x508>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <HAL_RCC_OscConfig+0x508>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f54:	f7ff f9e4 	bl	8001320 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5c:	f7ff f9e0 	bl	8001320 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1b2      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_RCC_OscConfig+0x508>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d108      	bne.n	8001f94 <HAL_RCC_OscConfig+0x4d8>
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f88:	4a0d      	ldr	r2, [pc, #52]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f92:	e029      	b.n	8001fe8 <HAL_RCC_OscConfig+0x52c>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b05      	cmp	r3, #5
 8001f9a:	d115      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x50c>
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa2:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	4a03      	ldr	r2, [pc, #12]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fbc:	e014      	b.n	8001fe8 <HAL_RCC_OscConfig+0x52c>
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	4b9a      	ldr	r3, [pc, #616]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	4a99      	ldr	r2, [pc, #612]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd8:	4b96      	ldr	r3, [pc, #600]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fde:	4a95      	ldr	r2, [pc, #596]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8001fe0:	f023 0304 	bic.w	r3, r3, #4
 8001fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d016      	beq.n	800201e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7ff f996 	bl	8001320 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7ff f992 	bl	8001320 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e162      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200e:	4b89      	ldr	r3, [pc, #548]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ed      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x53c>
 800201c:	e015      	b.n	800204a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7ff f97f 	bl	8001320 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7ff f97b 	bl	8001320 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e14b      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800203c:	4b7d      	ldr	r3, [pc, #500]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1ed      	bne.n	8002026 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800204a:	7ffb      	ldrb	r3, [r7, #31]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002050:	4b78      	ldr	r3, [pc, #480]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	4a77      	ldr	r2, [pc, #476]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d03c      	beq.n	80020e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01c      	beq.n	80020aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002070:	4b70      	ldr	r3, [pc, #448]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002072:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002076:	4a6f      	ldr	r2, [pc, #444]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7ff f94e 	bl	8001320 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002088:	f7ff f94a 	bl	8001320 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e11c      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800209a:	4b66      	ldr	r3, [pc, #408]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 800209c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0ef      	beq.n	8002088 <HAL_RCC_OscConfig+0x5cc>
 80020a8:	e01b      	b.n	80020e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020aa:	4b62      	ldr	r3, [pc, #392]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80020ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b0:	4a60      	ldr	r2, [pc, #384]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ba:	f7ff f931 	bl	8001320 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c2:	f7ff f92d 	bl	8001320 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0ff      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020d4:	4b57      	ldr	r3, [pc, #348]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80020d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1ef      	bne.n	80020c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80f3 	beq.w	80022d2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	f040 80c9 	bne.w	8002288 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020f6:	4b4f      	ldr	r3, [pc, #316]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f003 0203 	and.w	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	429a      	cmp	r2, r3
 8002108:	d12c      	bne.n	8002164 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	3b01      	subs	r3, #1
 8002116:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d123      	bne.n	8002164 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002126:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d11b      	bne.n	8002164 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002136:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d113      	bne.n	8002164 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	3b01      	subs	r3, #1
 800214a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800214c:	429a      	cmp	r2, r3
 800214e:	d109      	bne.n	8002164 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	085b      	lsrs	r3, r3, #1
 800215c:	3b01      	subs	r3, #1
 800215e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002160:	429a      	cmp	r2, r3
 8002162:	d06b      	beq.n	800223c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2b0c      	cmp	r3, #12
 8002168:	d062      	beq.n	8002230 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800216a:	4b32      	ldr	r3, [pc, #200]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0ac      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800217a:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a2d      	ldr	r2, [pc, #180]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002180:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002184:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002186:	f7ff f8cb 	bl	8001320 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218e:	f7ff f8c7 	bl	8001320 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e099      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f0      	bne.n	800218e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	4b21      	ldr	r3, [pc, #132]	; (8002238 <HAL_RCC_OscConfig+0x77c>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021bc:	3a01      	subs	r2, #1
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	4311      	orrs	r1, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021c6:	0212      	lsls	r2, r2, #8
 80021c8:	4311      	orrs	r1, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021ce:	0852      	lsrs	r2, r2, #1
 80021d0:	3a01      	subs	r2, #1
 80021d2:	0552      	lsls	r2, r2, #21
 80021d4:	4311      	orrs	r1, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021da:	0852      	lsrs	r2, r2, #1
 80021dc:	3a01      	subs	r2, #1
 80021de:	0652      	lsls	r2, r2, #25
 80021e0:	4311      	orrs	r1, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021e6:	06d2      	lsls	r2, r2, #27
 80021e8:	430a      	orrs	r2, r1
 80021ea:	4912      	ldr	r1, [pc, #72]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80021f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002206:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002208:	f7ff f88a 	bl	8001320 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002210:	f7ff f886 	bl	8001320 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e058      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800222e:	e050      	b.n	80022d2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e04f      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
 8002234:	40021000 	.word	0x40021000
 8002238:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223c:	4b27      	ldr	r3, [pc, #156]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d144      	bne.n	80022d2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002248:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a23      	ldr	r2, [pc, #140]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 800224e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002252:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002254:	4b21      	ldr	r3, [pc, #132]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a20      	ldr	r2, [pc, #128]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 800225a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002260:	f7ff f85e 	bl	8001320 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7ff f85a 	bl	8001320 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e02c      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x7ac>
 8002286:	e024      	b.n	80022d2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d01f      	beq.n	80022ce <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a12      	ldr	r2, [pc, #72]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 8002294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7ff f841 	bl	8001320 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a2:	f7ff f83d 	bl	8001320 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e00f      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	4905      	ldr	r1, [pc, #20]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCC_OscConfig+0x824>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	60cb      	str	r3, [r1, #12]
 80022cc:	e001      	b.n	80022d2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3720      	adds	r7, #32
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000
 80022e0:	feeefffc 	.word	0xfeeefffc

080022e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0e7      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f8:	4b75      	ldr	r3, [pc, #468]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d910      	bls.n	8002328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b72      	ldr	r3, [pc, #456]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 0207 	bic.w	r2, r3, #7
 800230e:	4970      	ldr	r1, [pc, #448]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b6e      	ldr	r3, [pc, #440]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0cf      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d010      	beq.n	8002356 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	4b66      	ldr	r3, [pc, #408]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002340:	429a      	cmp	r2, r3
 8002342:	d908      	bls.n	8002356 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002344:	4b63      	ldr	r3, [pc, #396]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4960      	ldr	r1, [pc, #384]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d04c      	beq.n	80023fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236a:	4b5a      	ldr	r3, [pc, #360]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d121      	bne.n	80023ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e0a6      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d107      	bne.n	8002392 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002382:	4b54      	ldr	r3, [pc, #336]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d115      	bne.n	80023ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e09a      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800239a:	4b4e      	ldr	r3, [pc, #312]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e08e      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023aa:	4b4a      	ldr	r3, [pc, #296]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e086      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ba:	4b46      	ldr	r3, [pc, #280]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f023 0203 	bic.w	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4943      	ldr	r1, [pc, #268]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023cc:	f7fe ffa8 	bl	8001320 <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d2:	e00a      	b.n	80023ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d4:	f7fe ffa4 	bl	8001320 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e06e      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	4b3a      	ldr	r3, [pc, #232]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 020c 	and.w	r2, r3, #12
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d1eb      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d010      	beq.n	800242a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002414:	429a      	cmp	r2, r3
 8002416:	d208      	bcs.n	800242a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	492b      	ldr	r1, [pc, #172]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800242a:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d210      	bcs.n	800245a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002438:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 0207 	bic.w	r2, r3, #7
 8002440:	4923      	ldr	r1, [pc, #140]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002448:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d001      	beq.n	800245a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e036      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	4918      	ldr	r1, [pc, #96]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d009      	beq.n	8002498 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002484:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4910      	ldr	r1, [pc, #64]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002498:	f000 f824 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	490b      	ldr	r1, [pc, #44]	; (80024d8 <HAL_RCC_ClockConfig+0x1f4>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
 80024b4:	4a09      	ldr	r2, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 80024b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x1fc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fedf 	bl	8001280 <HAL_InitTick>
 80024c2:	4603      	mov	r3, r0
 80024c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80024c6:	7afb      	ldrb	r3, [r7, #11]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40022000 	.word	0x40022000
 80024d4:	40021000 	.word	0x40021000
 80024d8:	08005ec0 	.word	0x08005ec0
 80024dc:	20000004 	.word	0x20000004
 80024e0:	20000008 	.word	0x20000008

080024e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	; 0x24
 80024e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f2:	4b3e      	ldr	r3, [pc, #248]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024fc:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x34>
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d121      	bne.n	8002556 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d11e      	bne.n	8002556 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002518:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d107      	bne.n	8002534 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002524:	4b31      	ldr	r3, [pc, #196]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	e005      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002534:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002540:	4a2b      	ldr	r2, [pc, #172]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10d      	bne.n	800256c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002554:	e00a      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b04      	cmp	r3, #4
 800255a:	d102      	bne.n	8002562 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800255c:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	e004      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d101      	bne.n	800256c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002568:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800256a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d134      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002572:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d003      	beq.n	800258a <HAL_RCC_GetSysClockFreq+0xa6>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d003      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0xac>
 8002588:	e005      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800258c:	617b      	str	r3, [r7, #20]
      break;
 800258e:	e005      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002592:	617b      	str	r3, [r7, #20]
      break;
 8002594:	e002      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	617b      	str	r3, [r7, #20]
      break;
 800259a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	3301      	adds	r3, #1
 80025a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	fb03 f202 	mul.w	r2, r3, r2
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	0e5b      	lsrs	r3, r3, #25
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	3301      	adds	r3, #1
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025dc:	69bb      	ldr	r3, [r7, #24]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	08005ed8 	.word	0x08005ed8
 80025f4:	00f42400 	.word	0x00f42400
 80025f8:	007a1200 	.word	0x007a1200

080025fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_RCC_GetHCLKFreq+0x14>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000004 	.word	0x20000004

08002614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002618:	f7ff fff0 	bl	80025fc <HAL_RCC_GetHCLKFreq>
 800261c:	4602      	mov	r2, r0
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	4904      	ldr	r1, [pc, #16]	; (800263c <HAL_RCC_GetPCLK1Freq+0x28>)
 800262a:	5ccb      	ldrb	r3, [r1, r3]
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021000 	.word	0x40021000
 800263c:	08005ed0 	.word	0x08005ed0

08002640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002644:	f7ff ffda 	bl	80025fc <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	0adb      	lsrs	r3, r3, #11
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4904      	ldr	r1, [pc, #16]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	08005ed0 	.word	0x08005ed0

0800266c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002678:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002684:	f7ff f9b6 	bl	80019f4 <HAL_PWREx_GetVoltageRange>
 8002688:	6178      	str	r0, [r7, #20]
 800268a:	e014      	b.n	80026b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	4a24      	ldr	r2, [pc, #144]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002696:	6593      	str	r3, [r2, #88]	; 0x58
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800269a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026a4:	f7ff f9a6 	bl	80019f4 <HAL_PWREx_GetVoltageRange>
 80026a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026bc:	d10b      	bne.n	80026d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b80      	cmp	r3, #128	; 0x80
 80026c2:	d919      	bls.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2ba0      	cmp	r3, #160	; 0xa0
 80026c8:	d902      	bls.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026ca:	2302      	movs	r3, #2
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	e013      	b.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d0:	2301      	movs	r3, #1
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	e010      	b.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b80      	cmp	r3, #128	; 0x80
 80026da:	d902      	bls.n	80026e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026dc:	2303      	movs	r3, #3
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	e00a      	b.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b80      	cmp	r3, #128	; 0x80
 80026e6:	d102      	bne.n	80026ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026e8:	2302      	movs	r3, #2
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	e004      	b.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b70      	cmp	r3, #112	; 0x70
 80026f2:	d101      	bne.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026f4:	2301      	movs	r3, #1
 80026f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f023 0207 	bic.w	r2, r3, #7
 8002700:	4909      	ldr	r1, [pc, #36]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002708:	4b07      	ldr	r3, [pc, #28]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	429a      	cmp	r2, r3
 8002714:	d001      	beq.n	800271a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	40022000 	.word	0x40022000

0800272c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002734:	2300      	movs	r3, #0
 8002736:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002738:	2300      	movs	r3, #0
 800273a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002744:	2b00      	cmp	r3, #0
 8002746:	d031      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002750:	d01a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002752:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002756:	d814      	bhi.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002758:	2b00      	cmp	r3, #0
 800275a:	d009      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800275c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002760:	d10f      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002762:	4b5d      	ldr	r3, [pc, #372]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	4a5c      	ldr	r2, [pc, #368]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800276e:	e00c      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3304      	adds	r3, #4
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fa44 	bl	8002c04 <RCCEx_PLLSAI1_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002780:	e003      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	74fb      	strb	r3, [r7, #19]
      break;
 8002786:	e000      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10b      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002790:	4b51      	ldr	r3, [pc, #324]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	494e      	ldr	r1, [pc, #312]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027a6:	e001      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 809e 	beq.w	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027be:	4b46      	ldr	r3, [pc, #280]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80027ce:	2300      	movs	r3, #0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00d      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d4:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	4a3f      	ldr	r2, [pc, #252]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027de:	6593      	str	r3, [r2, #88]	; 0x58
 80027e0:	4b3d      	ldr	r3, [pc, #244]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ec:	2301      	movs	r3, #1
 80027ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f0:	4b3a      	ldr	r3, [pc, #232]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a39      	ldr	r2, [pc, #228]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027fc:	f7fe fd90 	bl	8001320 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002802:	e009      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002804:	f7fe fd8c 	bl	8001320 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d902      	bls.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	74fb      	strb	r3, [r7, #19]
        break;
 8002816:	e005      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002818:	4b30      	ldr	r3, [pc, #192]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ef      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d15a      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800282a:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002834:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01e      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	429a      	cmp	r2, r3
 8002844:	d019      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002846:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002850:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002852:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002858:	4a1f      	ldr	r2, [pc, #124]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800285a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002862:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002868:	4a1b      	ldr	r2, [pc, #108]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002872:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d016      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fd4c 	bl	8001320 <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800288a:	e00b      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7fe fd48 	bl	8001320 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d902      	bls.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	74fb      	strb	r3, [r7, #19]
            break;
 80028a2:	e006      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0ec      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80028b2:	7cfb      	ldrb	r3, [r7, #19]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028b8:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028c6:	4904      	ldr	r1, [pc, #16]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028ce:	e009      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	74bb      	strb	r3, [r7, #18]
 80028d4:	e006      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e4:	7c7b      	ldrb	r3, [r7, #17]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d105      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ea:	4b9e      	ldr	r3, [pc, #632]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ee:	4a9d      	ldr	r2, [pc, #628]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002902:	4b98      	ldr	r3, [pc, #608]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f023 0203 	bic.w	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4994      	ldr	r1, [pc, #592]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002924:	4b8f      	ldr	r3, [pc, #572]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f023 020c 	bic.w	r2, r3, #12
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	498c      	ldr	r1, [pc, #560]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002946:	4b87      	ldr	r3, [pc, #540]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	4983      	ldr	r1, [pc, #524]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002968:	4b7e      	ldr	r3, [pc, #504]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	497b      	ldr	r1, [pc, #492]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800298a:	4b76      	ldr	r3, [pc, #472]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	4972      	ldr	r1, [pc, #456]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ac:	4b6d      	ldr	r3, [pc, #436]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	496a      	ldr	r1, [pc, #424]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029ce:	4b65      	ldr	r3, [pc, #404]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029dc:	4961      	ldr	r1, [pc, #388]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029f0:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fe:	4959      	ldr	r1, [pc, #356]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a12:	4b54      	ldr	r3, [pc, #336]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	4950      	ldr	r1, [pc, #320]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a34:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	4948      	ldr	r1, [pc, #288]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a56:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a5c:	f023 0203 	bic.w	r2, r3, #3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	493f      	ldr	r1, [pc, #252]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d028      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a78:	4b3a      	ldr	r3, [pc, #232]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a86:	4937      	ldr	r1, [pc, #220]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a98:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a31      	ldr	r2, [pc, #196]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aa2:	60d3      	str	r3, [r2, #12]
 8002aa4:	e011      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aae:	d10c      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f8a4 	bl	8002c04 <RCCEx_PLLSAI1_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002ac6:	7cfb      	ldrb	r3, [r7, #19]
 8002ac8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d028      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002adc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae4:	491f      	ldr	r1, [pc, #124]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002af4:	d106      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af6:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b00:	60d3      	str	r3, [r2, #12]
 8002b02:	e011      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2101      	movs	r1, #1
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f875 	bl	8002c04 <RCCEx_PLLSAI1_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b1e:	7cfb      	ldrb	r3, [r7, #19]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d02b      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	4908      	ldr	r1, [pc, #32]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b52:	d109      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a02      	ldr	r2, [pc, #8]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b5e:	60d3      	str	r3, [r2, #12]
 8002b60:	e014      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3304      	adds	r3, #4
 8002b76:	2101      	movs	r1, #1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 f843 	bl	8002c04 <RCCEx_PLLSAI1_Config>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b82:	7cfb      	ldrb	r3, [r7, #19]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01c      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b98:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba6:	4916      	ldr	r1, [pc, #88]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f820 	bl	8002c04 <RCCEx_PLLSAI1_Config>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002bce:	7cfb      	ldrb	r3, [r7, #19]
 8002bd0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bec:	4904      	ldr	r1, [pc, #16]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bf4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000

08002c04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c12:	4b74      	ldr	r3, [pc, #464]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d018      	beq.n	8002c50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c1e:	4b71      	ldr	r3, [pc, #452]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0203 	and.w	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d10d      	bne.n	8002c4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
       ||
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c36:	4b6b      	ldr	r3, [pc, #428]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
       ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d047      	beq.n	8002cda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
 8002c4e:	e044      	b.n	8002cda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d018      	beq.n	8002c8a <RCCEx_PLLSAI1_Config+0x86>
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d825      	bhi.n	8002ca8 <RCCEx_PLLSAI1_Config+0xa4>
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d002      	beq.n	8002c66 <RCCEx_PLLSAI1_Config+0x62>
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d009      	beq.n	8002c78 <RCCEx_PLLSAI1_Config+0x74>
 8002c64:	e020      	b.n	8002ca8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c66:	4b5f      	ldr	r3, [pc, #380]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d11d      	bne.n	8002cae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c76:	e01a      	b.n	8002cae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c78:	4b5a      	ldr	r3, [pc, #360]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d116      	bne.n	8002cb2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c88:	e013      	b.n	8002cb2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c8a:	4b56      	ldr	r3, [pc, #344]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10f      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c96:	4b53      	ldr	r3, [pc, #332]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ca6:	e006      	b.n	8002cb6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      break;
 8002cac:	e004      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e002      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10d      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cbe:	4b49      	ldr	r3, [pc, #292]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6819      	ldr	r1, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	4943      	ldr	r1, [pc, #268]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d17c      	bne.n	8002dda <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ce0:	4b40      	ldr	r3, [pc, #256]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a3f      	ldr	r2, [pc, #252]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cec:	f7fe fb18 	bl	8001320 <HAL_GetTick>
 8002cf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cf2:	e009      	b.n	8002d08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cf4:	f7fe fb14 	bl	8001320 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d902      	bls.n	8002d08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	73fb      	strb	r3, [r7, #15]
        break;
 8002d06:	e005      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d08:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ef      	bne.n	8002cf4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d15f      	bne.n	8002dda <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d110      	bne.n	8002d42 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d20:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002d28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6892      	ldr	r2, [r2, #8]
 8002d30:	0211      	lsls	r1, r2, #8
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68d2      	ldr	r2, [r2, #12]
 8002d36:	06d2      	lsls	r2, r2, #27
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	492a      	ldr	r1, [pc, #168]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	610b      	str	r3, [r1, #16]
 8002d40:	e027      	b.n	8002d92 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d112      	bne.n	8002d6e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d48:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6892      	ldr	r2, [r2, #8]
 8002d58:	0211      	lsls	r1, r2, #8
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6912      	ldr	r2, [r2, #16]
 8002d5e:	0852      	lsrs	r2, r2, #1
 8002d60:	3a01      	subs	r2, #1
 8002d62:	0552      	lsls	r2, r2, #21
 8002d64:	430a      	orrs	r2, r1
 8002d66:	491f      	ldr	r1, [pc, #124]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	610b      	str	r3, [r1, #16]
 8002d6c:	e011      	b.n	8002d92 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6892      	ldr	r2, [r2, #8]
 8002d7e:	0211      	lsls	r1, r2, #8
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6952      	ldr	r2, [r2, #20]
 8002d84:	0852      	lsrs	r2, r2, #1
 8002d86:	3a01      	subs	r2, #1
 8002d88:	0652      	lsls	r2, r2, #25
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	4915      	ldr	r1, [pc, #84]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7fe fabf 	bl	8001320 <HAL_GetTick>
 8002da2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002da4:	e009      	b.n	8002dba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002da6:	f7fe fabb 	bl	8001320 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d902      	bls.n	8002dba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	73fb      	strb	r3, [r7, #15]
          break;
 8002db8:	e005      	b.n	8002dc6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0ef      	beq.n	8002da6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d106      	bne.n	8002dda <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	4903      	ldr	r1, [pc, #12]	; (8002de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000

08002de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e049      	b.n	8002e8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fe f8b4 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3304      	adds	r3, #4
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f000 fbc6 	bl	80035b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e049      	b.n	8002f3c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d106      	bne.n	8002ec2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f841 	bl	8002f44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	f000 fb6f 	bl	80035b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d122      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0202 	mvn.w	r2, #2
 8002f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 faed 	bl	800357a <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fadf 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 faf0 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d122      	bne.n	8003008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d11b      	bne.n	8003008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0204 	mvn.w	r2, #4
 8002fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fac3 	bl	800357a <HAL_TIM_IC_CaptureCallback>
 8002ff4:	e005      	b.n	8003002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fab5 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fac6 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b08      	cmp	r3, #8
 8003014:	d122      	bne.n	800305c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b08      	cmp	r3, #8
 8003022:	d11b      	bne.n	800305c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0208 	mvn.w	r2, #8
 800302c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2204      	movs	r2, #4
 8003032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fa99 	bl	800357a <HAL_TIM_IC_CaptureCallback>
 8003048:	e005      	b.n	8003056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa8b 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fa9c 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b10      	cmp	r3, #16
 8003068:	d122      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b10      	cmp	r3, #16
 8003076:	d11b      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0210 	mvn.w	r2, #16
 8003080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2208      	movs	r2, #8
 8003086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fa6f 	bl	800357a <HAL_TIM_IC_CaptureCallback>
 800309c:	e005      	b.n	80030aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fa61 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fa72 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d10e      	bne.n	80030dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d107      	bne.n	80030dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0201 	mvn.w	r2, #1
 80030d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fa3b 	bl	8003552 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	2b80      	cmp	r3, #128	; 0x80
 80030e8:	d10e      	bne.n	8003108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f4:	2b80      	cmp	r3, #128	; 0x80
 80030f6:	d107      	bne.n	8003108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fe56 	bl	8003db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003116:	d10e      	bne.n	8003136 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003122:	2b80      	cmp	r3, #128	; 0x80
 8003124:	d107      	bne.n	8003136 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800312e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fe49 	bl	8003dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	d10e      	bne.n	8003162 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b40      	cmp	r3, #64	; 0x40
 8003150:	d107      	bne.n	8003162 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800315a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fa20 	bl	80035a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b20      	cmp	r3, #32
 800316e:	d10e      	bne.n	800318e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b20      	cmp	r3, #32
 800317c:	d107      	bne.n	800318e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f06f 0220 	mvn.w	r2, #32
 8003186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fe09 	bl	8003da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0ff      	b.n	80033b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b14      	cmp	r3, #20
 80031c2:	f200 80f0 	bhi.w	80033a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80031c6:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	08003221 	.word	0x08003221
 80031d0:	080033a7 	.word	0x080033a7
 80031d4:	080033a7 	.word	0x080033a7
 80031d8:	080033a7 	.word	0x080033a7
 80031dc:	08003261 	.word	0x08003261
 80031e0:	080033a7 	.word	0x080033a7
 80031e4:	080033a7 	.word	0x080033a7
 80031e8:	080033a7 	.word	0x080033a7
 80031ec:	080032a3 	.word	0x080032a3
 80031f0:	080033a7 	.word	0x080033a7
 80031f4:	080033a7 	.word	0x080033a7
 80031f8:	080033a7 	.word	0x080033a7
 80031fc:	080032e3 	.word	0x080032e3
 8003200:	080033a7 	.word	0x080033a7
 8003204:	080033a7 	.word	0x080033a7
 8003208:	080033a7 	.word	0x080033a7
 800320c:	08003325 	.word	0x08003325
 8003210:	080033a7 	.word	0x080033a7
 8003214:	080033a7 	.word	0x080033a7
 8003218:	080033a7 	.word	0x080033a7
 800321c:	08003365 	.word	0x08003365
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fa34 	bl	8003694 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0208 	orr.w	r2, r2, #8
 800323a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0204 	bic.w	r2, r2, #4
 800324a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6999      	ldr	r1, [r3, #24]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	619a      	str	r2, [r3, #24]
      break;
 800325e:	e0a5      	b.n	80033ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fa90 	bl	800378c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6999      	ldr	r1, [r3, #24]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	021a      	lsls	r2, r3, #8
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	619a      	str	r2, [r3, #24]
      break;
 80032a0:	e084      	b.n	80033ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fae9 	bl	8003880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0208 	orr.w	r2, r2, #8
 80032bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0204 	bic.w	r2, r2, #4
 80032cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69d9      	ldr	r1, [r3, #28]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	61da      	str	r2, [r3, #28]
      break;
 80032e0:	e064      	b.n	80033ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fb41 	bl	8003970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69d9      	ldr	r1, [r3, #28]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	021a      	lsls	r2, r3, #8
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	61da      	str	r2, [r3, #28]
      break;
 8003322:	e043      	b.n	80033ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fb7e 	bl	8003a2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0208 	orr.w	r2, r2, #8
 800333e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0204 	bic.w	r2, r2, #4
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003362:	e023      	b.n	80033ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fbb6 	bl	8003adc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800337e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	021a      	lsls	r2, r3, #8
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033a4:	e002      	b.n	80033ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]
      break;
 80033aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop

080033c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_TIM_ConfigClockSource+0x1c>
 80033d8:	2302      	movs	r3, #2
 80033da:	e0b6      	b.n	800354a <HAL_TIM_ConfigClockSource+0x18a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003406:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003418:	d03e      	beq.n	8003498 <HAL_TIM_ConfigClockSource+0xd8>
 800341a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800341e:	f200 8087 	bhi.w	8003530 <HAL_TIM_ConfigClockSource+0x170>
 8003422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003426:	f000 8086 	beq.w	8003536 <HAL_TIM_ConfigClockSource+0x176>
 800342a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342e:	d87f      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x170>
 8003430:	2b70      	cmp	r3, #112	; 0x70
 8003432:	d01a      	beq.n	800346a <HAL_TIM_ConfigClockSource+0xaa>
 8003434:	2b70      	cmp	r3, #112	; 0x70
 8003436:	d87b      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x170>
 8003438:	2b60      	cmp	r3, #96	; 0x60
 800343a:	d050      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x11e>
 800343c:	2b60      	cmp	r3, #96	; 0x60
 800343e:	d877      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x170>
 8003440:	2b50      	cmp	r3, #80	; 0x50
 8003442:	d03c      	beq.n	80034be <HAL_TIM_ConfigClockSource+0xfe>
 8003444:	2b50      	cmp	r3, #80	; 0x50
 8003446:	d873      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x170>
 8003448:	2b40      	cmp	r3, #64	; 0x40
 800344a:	d058      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0x13e>
 800344c:	2b40      	cmp	r3, #64	; 0x40
 800344e:	d86f      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x170>
 8003450:	2b30      	cmp	r3, #48	; 0x30
 8003452:	d064      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x15e>
 8003454:	2b30      	cmp	r3, #48	; 0x30
 8003456:	d86b      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x170>
 8003458:	2b20      	cmp	r3, #32
 800345a:	d060      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x15e>
 800345c:	2b20      	cmp	r3, #32
 800345e:	d867      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x170>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d05c      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x15e>
 8003464:	2b10      	cmp	r3, #16
 8003466:	d05a      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x15e>
 8003468:	e062      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6899      	ldr	r1, [r3, #8]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f000 fc03 	bl	8003c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800348c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	609a      	str	r2, [r3, #8]
      break;
 8003496:	e04f      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6899      	ldr	r1, [r3, #8]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f000 fbec 	bl	8003c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ba:	609a      	str	r2, [r3, #8]
      break;
 80034bc:	e03c      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6859      	ldr	r1, [r3, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f000 fb60 	bl	8003b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2150      	movs	r1, #80	; 0x50
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fbb9 	bl	8003c4e <TIM_ITRx_SetConfig>
      break;
 80034dc:	e02c      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6859      	ldr	r1, [r3, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	461a      	mov	r2, r3
 80034ec:	f000 fb7f 	bl	8003bee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2160      	movs	r1, #96	; 0x60
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fba9 	bl	8003c4e <TIM_ITRx_SetConfig>
      break;
 80034fc:	e01c      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6859      	ldr	r1, [r3, #4]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	461a      	mov	r2, r3
 800350c:	f000 fb40 	bl	8003b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2140      	movs	r1, #64	; 0x40
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fb99 	bl	8003c4e <TIM_ITRx_SetConfig>
      break;
 800351c:	e00c      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f000 fb90 	bl	8003c4e <TIM_ITRx_SetConfig>
      break;
 800352e:	e003      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      break;
 8003534:	e000      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003536:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a2e      	ldr	r2, [pc, #184]	; (8003684 <TIM_Base_SetConfig+0xcc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d007      	beq.n	80035e0 <TIM_Base_SetConfig+0x28>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d6:	d003      	beq.n	80035e0 <TIM_Base_SetConfig+0x28>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a2b      	ldr	r2, [pc, #172]	; (8003688 <TIM_Base_SetConfig+0xd0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d108      	bne.n	80035f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a23      	ldr	r2, [pc, #140]	; (8003684 <TIM_Base_SetConfig+0xcc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00f      	beq.n	800361a <TIM_Base_SetConfig+0x62>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003600:	d00b      	beq.n	800361a <TIM_Base_SetConfig+0x62>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a20      	ldr	r2, [pc, #128]	; (8003688 <TIM_Base_SetConfig+0xd0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <TIM_Base_SetConfig+0x62>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a1f      	ldr	r2, [pc, #124]	; (800368c <TIM_Base_SetConfig+0xd4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_Base_SetConfig+0x62>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a1e      	ldr	r2, [pc, #120]	; (8003690 <TIM_Base_SetConfig+0xd8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d108      	bne.n	800362c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a0c      	ldr	r2, [pc, #48]	; (8003684 <TIM_Base_SetConfig+0xcc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d007      	beq.n	8003668 <TIM_Base_SetConfig+0xb0>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a0c      	ldr	r2, [pc, #48]	; (800368c <TIM_Base_SetConfig+0xd4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d003      	beq.n	8003668 <TIM_Base_SetConfig+0xb0>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a0b      	ldr	r2, [pc, #44]	; (8003690 <TIM_Base_SetConfig+0xd8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d103      	bne.n	8003670 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	615a      	str	r2, [r3, #20]
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40012c00 	.word	0x40012c00
 8003688:	40000400 	.word	0x40000400
 800368c:	40014000 	.word	0x40014000
 8003690:	40014400 	.word	0x40014400

08003694 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f023 0201 	bic.w	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0303 	bic.w	r3, r3, #3
 80036ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f023 0302 	bic.w	r3, r3, #2
 80036e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a24      	ldr	r2, [pc, #144]	; (8003780 <TIM_OC1_SetConfig+0xec>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d007      	beq.n	8003704 <TIM_OC1_SetConfig+0x70>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a23      	ldr	r2, [pc, #140]	; (8003784 <TIM_OC1_SetConfig+0xf0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d003      	beq.n	8003704 <TIM_OC1_SetConfig+0x70>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a22      	ldr	r2, [pc, #136]	; (8003788 <TIM_OC1_SetConfig+0xf4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d10c      	bne.n	800371e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f023 0308 	bic.w	r3, r3, #8
 800370a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f023 0304 	bic.w	r3, r3, #4
 800371c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a17      	ldr	r2, [pc, #92]	; (8003780 <TIM_OC1_SetConfig+0xec>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d007      	beq.n	8003736 <TIM_OC1_SetConfig+0xa2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a16      	ldr	r2, [pc, #88]	; (8003784 <TIM_OC1_SetConfig+0xf0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d003      	beq.n	8003736 <TIM_OC1_SetConfig+0xa2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a15      	ldr	r2, [pc, #84]	; (8003788 <TIM_OC1_SetConfig+0xf4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d111      	bne.n	800375a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800373c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	621a      	str	r2, [r3, #32]
}
 8003774:	bf00      	nop
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40014000 	.word	0x40014000
 8003788:	40014400 	.word	0x40014400

0800378c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f023 0210 	bic.w	r2, r3, #16
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0320 	bic.w	r3, r3, #32
 80037da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a22      	ldr	r2, [pc, #136]	; (8003874 <TIM_OC2_SetConfig+0xe8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d10d      	bne.n	800380c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800380a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a19      	ldr	r2, [pc, #100]	; (8003874 <TIM_OC2_SetConfig+0xe8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d007      	beq.n	8003824 <TIM_OC2_SetConfig+0x98>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a18      	ldr	r2, [pc, #96]	; (8003878 <TIM_OC2_SetConfig+0xec>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_OC2_SetConfig+0x98>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a17      	ldr	r2, [pc, #92]	; (800387c <TIM_OC2_SetConfig+0xf0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d113      	bne.n	800384c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800382a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	621a      	str	r2, [r3, #32]
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40012c00 	.word	0x40012c00
 8003878:	40014000 	.word	0x40014000
 800387c:	40014400 	.word	0x40014400

08003880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0303 	bic.w	r3, r3, #3
 80038ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a21      	ldr	r2, [pc, #132]	; (8003964 <TIM_OC3_SetConfig+0xe4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d10d      	bne.n	80038fe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a18      	ldr	r2, [pc, #96]	; (8003964 <TIM_OC3_SetConfig+0xe4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d007      	beq.n	8003916 <TIM_OC3_SetConfig+0x96>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a17      	ldr	r2, [pc, #92]	; (8003968 <TIM_OC3_SetConfig+0xe8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d003      	beq.n	8003916 <TIM_OC3_SetConfig+0x96>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a16      	ldr	r2, [pc, #88]	; (800396c <TIM_OC3_SetConfig+0xec>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d113      	bne.n	800393e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800391c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	621a      	str	r2, [r3, #32]
}
 8003958:	bf00      	nop
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	40012c00 	.word	0x40012c00
 8003968:	40014000 	.word	0x40014000
 800396c:	40014400 	.word	0x40014400

08003970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800399e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	031b      	lsls	r3, r3, #12
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <TIM_OC4_SetConfig+0xb0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d007      	beq.n	80039e4 <TIM_OC4_SetConfig+0x74>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <TIM_OC4_SetConfig+0xb4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_OC4_SetConfig+0x74>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <TIM_OC4_SetConfig+0xb8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d109      	bne.n	80039f8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	019b      	lsls	r3, r3, #6
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	621a      	str	r2, [r3, #32]
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40014000 	.word	0x40014000
 8003a28:	40014400 	.word	0x40014400

08003a2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	041b      	lsls	r3, r3, #16
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <TIM_OC5_SetConfig+0xa4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_OC5_SetConfig+0x6a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a12      	ldr	r2, [pc, #72]	; (8003ad4 <TIM_OC5_SetConfig+0xa8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_OC5_SetConfig+0x6a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a11      	ldr	r2, [pc, #68]	; (8003ad8 <TIM_OC5_SetConfig+0xac>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d109      	bne.n	8003aaa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	621a      	str	r2, [r3, #32]
}
 8003ac4:	bf00      	nop
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	40014400 	.word	0x40014400

08003adc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	051b      	lsls	r3, r3, #20
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <TIM_OC6_SetConfig+0xa8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d007      	beq.n	8003b48 <TIM_OC6_SetConfig+0x6c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a13      	ldr	r2, [pc, #76]	; (8003b88 <TIM_OC6_SetConfig+0xac>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_OC6_SetConfig+0x6c>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <TIM_OC6_SetConfig+0xb0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d109      	bne.n	8003b5c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	029b      	lsls	r3, r3, #10
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	40014000 	.word	0x40014000
 8003b8c:	40014400 	.word	0x40014400

08003b90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f023 0201 	bic.w	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f023 030a 	bic.w	r3, r3, #10
 8003bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	621a      	str	r2, [r3, #32]
}
 8003be2:	bf00      	nop
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b087      	sub	sp, #28
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f023 0210 	bic.w	r2, r3, #16
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	031b      	lsls	r3, r3, #12
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	621a      	str	r2, [r3, #32]
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f043 0307 	orr.w	r3, r3, #7
 8003c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	609a      	str	r2, [r3, #8]
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	021a      	lsls	r2, r3, #8
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	609a      	str	r2, [r3, #8]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e054      	b.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a24      	ldr	r2, [pc, #144]	; (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d108      	bne.n	8003d18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00e      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d44:	d009      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a13      	ldr	r2, [pc, #76]	; (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d004      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a11      	ldr	r2, [pc, #68]	; (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d10c      	bne.n	8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40012c00 	.word	0x40012c00
 8003d98:	40000400 	.word	0x40000400
 8003d9c:	40014000 	.word	0x40014000

08003da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e040      	b.n	8003e70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fd f942 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2224      	movs	r2, #36	; 0x24
 8003e08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fc18 	bl	8004650 <UART_SetConfig>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e022      	b.n	8003e70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fe92 	bl	8004b5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 ff19 	bl	8004ca0 <UART_CheckIdleState>
 8003e6e:	4603      	mov	r3, r0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	f040 8082 	bne.w	8003f96 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <HAL_UART_Transmit+0x26>
 8003e98:	88fb      	ldrh	r3, [r7, #6]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e07a      	b.n	8003f98 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_UART_Transmit+0x38>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e073      	b.n	8003f98 <HAL_UART_Transmit+0x120>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2221      	movs	r2, #33	; 0x21
 8003ec4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ec6:	f7fd fa2b 	bl	8001320 <HAL_GetTick>
 8003eca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee4:	d108      	bne.n	8003ef8 <HAL_UART_Transmit+0x80>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d104      	bne.n	8003ef8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	e003      	b.n	8003f00 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f08:	e02d      	b.n	8003f66 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2200      	movs	r2, #0
 8003f12:	2180      	movs	r1, #128	; 0x80
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 ff0c 	bl	8004d32 <UART_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e039      	b.n	8003f98 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10b      	bne.n	8003f42 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	881a      	ldrh	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f36:	b292      	uxth	r2, r2
 8003f38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	3302      	adds	r3, #2
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	e008      	b.n	8003f54 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	b292      	uxth	r2, r2
 8003f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	3301      	adds	r3, #1
 8003f52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1cb      	bne.n	8003f0a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2140      	movs	r1, #64	; 0x40
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 fed8 	bl	8004d32 <UART_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e005      	b.n	8003f98 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	e000      	b.n	8003f98 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f96:	2302      	movs	r3, #2
  }
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08a      	sub	sp, #40	; 0x28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	4613      	mov	r3, r2
 8003fac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d142      	bne.n	800403c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_UART_Receive_IT+0x22>
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e03b      	b.n	800403e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Receive_IT+0x34>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e034      	b.n	800403e <HAL_UART_Receive_IT+0x9e>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a18      	ldr	r2, [pc, #96]	; (8004048 <HAL_UART_Receive_IT+0xa8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d01f      	beq.n	800402c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d018      	beq.n	800402c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	613b      	str	r3, [r7, #16]
   return(result);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	623b      	str	r3, [r7, #32]
 800401a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	69f9      	ldr	r1, [r7, #28]
 800401e:	6a3a      	ldr	r2, [r7, #32]
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	61bb      	str	r3, [r7, #24]
   return(result);
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e6      	bne.n	8003ffa <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	461a      	mov	r2, r3
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 ff42 	bl	8004ebc <UART_Start_Receive_IT>
 8004038:	4603      	mov	r3, r0
 800403a:	e000      	b.n	800403e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800403c:	2302      	movs	r3, #2
  }
}
 800403e:	4618      	mov	r0, r3
 8004040:	3728      	adds	r7, #40	; 0x28
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40008000 	.word	0x40008000

0800404c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b0ba      	sub	sp, #232	; 0xe8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004072:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004076:	f640 030f 	movw	r3, #2063	; 0x80f
 800407a:	4013      	ands	r3, r2
 800407c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d115      	bne.n	80040b4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00f      	beq.n	80040b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d009      	beq.n	80040b4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 82a6 	beq.w	80045f6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	4798      	blx	r3
      }
      return;
 80040b2:	e2a0      	b.n	80045f6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80040b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8117 	beq.w	80042ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80040ce:	4b85      	ldr	r3, [pc, #532]	; (80042e4 <HAL_UART_IRQHandler+0x298>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 810a 	beq.w	80042ec <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d011      	beq.n	8004108 <HAL_UART_IRQHandler+0xbc>
 80040e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00b      	beq.n	8004108 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2201      	movs	r2, #1
 80040f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040fe:	f043 0201 	orr.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d011      	beq.n	8004138 <HAL_UART_IRQHandler+0xec>
 8004114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2202      	movs	r2, #2
 8004126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800412e:	f043 0204 	orr.w	r2, r3, #4
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d011      	beq.n	8004168 <HAL_UART_IRQHandler+0x11c>
 8004144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00b      	beq.n	8004168 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2204      	movs	r2, #4
 8004156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800415e:	f043 0202 	orr.w	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d017      	beq.n	80041a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004184:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00b      	beq.n	80041a4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2208      	movs	r2, #8
 8004192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800419a:	f043 0208 	orr.w	r2, r3, #8
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d012      	beq.n	80041d6 <HAL_UART_IRQHandler+0x18a>
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00c      	beq.n	80041d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041cc:	f043 0220 	orr.w	r2, r3, #32
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 820c 	beq.w	80045fa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00d      	beq.n	800420a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004210:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d005      	beq.n	800422e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004226:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800422a:	2b00      	cmp	r3, #0
 800422c:	d04f      	beq.n	80042ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 ff0e 	bl	8005050 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b40      	cmp	r3, #64	; 0x40
 8004240:	d141      	bne.n	80042c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3308      	adds	r3, #8
 8004248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800425c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3308      	adds	r3, #8
 800426a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800426e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800427a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1d9      	bne.n	8004242 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	2b00      	cmp	r3, #0
 8004294:	d013      	beq.n	80042be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a13      	ldr	r2, [pc, #76]	; (80042e8 <HAL_UART_IRQHandler+0x29c>)
 800429c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fd f9bb 	bl	800161e <HAL_DMA_Abort_IT>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d017      	beq.n	80042de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80042b8:	4610      	mov	r0, r2
 80042ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	e00f      	b.n	80042de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f9b0 	bl	8004624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c4:	e00b      	b.n	80042de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f9ac 	bl	8004624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042cc:	e007      	b.n	80042de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f9a8 	bl	8004624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80042dc:	e18d      	b.n	80045fa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042de:	bf00      	nop
    return;
 80042e0:	e18b      	b.n	80045fa <HAL_UART_IRQHandler+0x5ae>
 80042e2:	bf00      	nop
 80042e4:	04000120 	.word	0x04000120
 80042e8:	08005117 	.word	0x08005117

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	f040 8146 	bne.w	8004582 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 813f 	beq.w	8004582 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8138 	beq.w	8004582 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2210      	movs	r2, #16
 8004318:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	f040 80b4 	bne.w	8004492 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004336:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 815f 	beq.w	80045fe <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800434a:	429a      	cmp	r2, r3
 800434c:	f080 8157 	bcs.w	80045fe <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004356:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	f040 8085 	bne.w	8004476 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004380:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004388:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004396:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800439a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1da      	bne.n	800436c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3308      	adds	r3, #8
 80043bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c0:	e853 3f00 	ldrex	r3, [r3]
 80043c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043c8:	f023 0301 	bic.w	r3, r3, #1
 80043cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3308      	adds	r3, #8
 80043d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e1      	bne.n	80043b6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3308      	adds	r3, #8
 80043f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3308      	adds	r3, #8
 8004412:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004416:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004418:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800441c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e3      	bne.n	80043f2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443e:	e853 3f00 	ldrex	r3, [r3]
 8004442:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004446:	f023 0310 	bic.w	r3, r3, #16
 800444a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004458:	65bb      	str	r3, [r7, #88]	; 0x58
 800445a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800445e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e4      	bne.n	8004436 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	4618      	mov	r0, r3
 8004472:	f7fd f896 	bl	80015a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004482:	b29b      	uxth	r3, r3
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	b29b      	uxth	r3, r3
 8004488:	4619      	mov	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f8d4 	bl	8004638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004490:	e0b5      	b.n	80045fe <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800449e:	b29b      	uxth	r3, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80a7 	beq.w	8004602 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80044b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a2 	beq.w	8004602 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044e0:	647b      	str	r3, [r7, #68]	; 0x44
 80044e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e4      	bne.n	80044be <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3308      	adds	r3, #8
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	623b      	str	r3, [r7, #32]
   return(result);
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	f023 0301 	bic.w	r3, r3, #1
 800450a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3308      	adds	r3, #8
 8004514:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004518:	633a      	str	r2, [r7, #48]	; 0x30
 800451a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800451e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e3      	bne.n	80044f4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	60fb      	str	r3, [r7, #12]
   return(result);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0310 	bic.w	r3, r3, #16
 8004552:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	69b9      	ldr	r1, [r7, #24]
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	617b      	str	r3, [r7, #20]
   return(result);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e4      	bne.n	800453e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004578:	4619      	mov	r1, r3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f85c 	bl	8004638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004580:	e03f      	b.n	8004602 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00e      	beq.n	80045ac <HAL_UART_IRQHandler+0x560>
 800458e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 ff56 	bl	8005456 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045aa:	e02d      	b.n	8004608 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00e      	beq.n	80045d6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01c      	beq.n	8004606 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4798      	blx	r3
    }
    return;
 80045d4:	e017      	b.n	8004606 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d012      	beq.n	8004608 <HAL_UART_IRQHandler+0x5bc>
 80045e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00c      	beq.n	8004608 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fda7 	bl	8005142 <UART_EndTransmit_IT>
    return;
 80045f4:	e008      	b.n	8004608 <HAL_UART_IRQHandler+0x5bc>
      return;
 80045f6:	bf00      	nop
 80045f8:	e006      	b.n	8004608 <HAL_UART_IRQHandler+0x5bc>
    return;
 80045fa:	bf00      	nop
 80045fc:	e004      	b.n	8004608 <HAL_UART_IRQHandler+0x5bc>
      return;
 80045fe:	bf00      	nop
 8004600:	e002      	b.n	8004608 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004606:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004608:	37e8      	adds	r7, #232	; 0xe8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop

08004610 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004654:	b08a      	sub	sp, #40	; 0x28
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	431a      	orrs	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	431a      	orrs	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	4313      	orrs	r3, r2
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4ba5      	ldr	r3, [pc, #660]	; (8004914 <UART_SetConfig+0x2c4>)
 8004680:	4013      	ands	r3, r2
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004688:	430b      	orrs	r3, r1
 800468a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a9a      	ldr	r2, [pc, #616]	; (8004918 <UART_SetConfig+0x2c8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b8:	4313      	orrs	r3, r2
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046cc:	430a      	orrs	r2, r1
 80046ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a91      	ldr	r2, [pc, #580]	; (800491c <UART_SetConfig+0x2cc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d126      	bne.n	8004728 <UART_SetConfig+0xd8>
 80046da:	4b91      	ldr	r3, [pc, #580]	; (8004920 <UART_SetConfig+0x2d0>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d81b      	bhi.n	8004720 <UART_SetConfig+0xd0>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <UART_SetConfig+0xa0>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004701 	.word	0x08004701
 80046f4:	08004711 	.word	0x08004711
 80046f8:	08004709 	.word	0x08004709
 80046fc:	08004719 	.word	0x08004719
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004706:	e0d6      	b.n	80048b6 <UART_SetConfig+0x266>
 8004708:	2302      	movs	r3, #2
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470e:	e0d2      	b.n	80048b6 <UART_SetConfig+0x266>
 8004710:	2304      	movs	r3, #4
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004716:	e0ce      	b.n	80048b6 <UART_SetConfig+0x266>
 8004718:	2308      	movs	r3, #8
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471e:	e0ca      	b.n	80048b6 <UART_SetConfig+0x266>
 8004720:	2310      	movs	r3, #16
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004726:	e0c6      	b.n	80048b6 <UART_SetConfig+0x266>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a7d      	ldr	r2, [pc, #500]	; (8004924 <UART_SetConfig+0x2d4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d138      	bne.n	80047a4 <UART_SetConfig+0x154>
 8004732:	4b7b      	ldr	r3, [pc, #492]	; (8004920 <UART_SetConfig+0x2d0>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004738:	f003 030c 	and.w	r3, r3, #12
 800473c:	2b0c      	cmp	r3, #12
 800473e:	d82d      	bhi.n	800479c <UART_SetConfig+0x14c>
 8004740:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <UART_SetConfig+0xf8>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	0800477d 	.word	0x0800477d
 800474c:	0800479d 	.word	0x0800479d
 8004750:	0800479d 	.word	0x0800479d
 8004754:	0800479d 	.word	0x0800479d
 8004758:	0800478d 	.word	0x0800478d
 800475c:	0800479d 	.word	0x0800479d
 8004760:	0800479d 	.word	0x0800479d
 8004764:	0800479d 	.word	0x0800479d
 8004768:	08004785 	.word	0x08004785
 800476c:	0800479d 	.word	0x0800479d
 8004770:	0800479d 	.word	0x0800479d
 8004774:	0800479d 	.word	0x0800479d
 8004778:	08004795 	.word	0x08004795
 800477c:	2300      	movs	r3, #0
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004782:	e098      	b.n	80048b6 <UART_SetConfig+0x266>
 8004784:	2302      	movs	r3, #2
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478a:	e094      	b.n	80048b6 <UART_SetConfig+0x266>
 800478c:	2304      	movs	r3, #4
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004792:	e090      	b.n	80048b6 <UART_SetConfig+0x266>
 8004794:	2308      	movs	r3, #8
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479a:	e08c      	b.n	80048b6 <UART_SetConfig+0x266>
 800479c:	2310      	movs	r3, #16
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a2:	e088      	b.n	80048b6 <UART_SetConfig+0x266>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a5f      	ldr	r2, [pc, #380]	; (8004928 <UART_SetConfig+0x2d8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d125      	bne.n	80047fa <UART_SetConfig+0x1aa>
 80047ae:	4b5c      	ldr	r3, [pc, #368]	; (8004920 <UART_SetConfig+0x2d0>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047b8:	2b30      	cmp	r3, #48	; 0x30
 80047ba:	d016      	beq.n	80047ea <UART_SetConfig+0x19a>
 80047bc:	2b30      	cmp	r3, #48	; 0x30
 80047be:	d818      	bhi.n	80047f2 <UART_SetConfig+0x1a2>
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d00a      	beq.n	80047da <UART_SetConfig+0x18a>
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d814      	bhi.n	80047f2 <UART_SetConfig+0x1a2>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <UART_SetConfig+0x182>
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d008      	beq.n	80047e2 <UART_SetConfig+0x192>
 80047d0:	e00f      	b.n	80047f2 <UART_SetConfig+0x1a2>
 80047d2:	2300      	movs	r3, #0
 80047d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d8:	e06d      	b.n	80048b6 <UART_SetConfig+0x266>
 80047da:	2302      	movs	r3, #2
 80047dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e0:	e069      	b.n	80048b6 <UART_SetConfig+0x266>
 80047e2:	2304      	movs	r3, #4
 80047e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e8:	e065      	b.n	80048b6 <UART_SetConfig+0x266>
 80047ea:	2308      	movs	r3, #8
 80047ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f0:	e061      	b.n	80048b6 <UART_SetConfig+0x266>
 80047f2:	2310      	movs	r3, #16
 80047f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f8:	e05d      	b.n	80048b6 <UART_SetConfig+0x266>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a4b      	ldr	r2, [pc, #300]	; (800492c <UART_SetConfig+0x2dc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d125      	bne.n	8004850 <UART_SetConfig+0x200>
 8004804:	4b46      	ldr	r3, [pc, #280]	; (8004920 <UART_SetConfig+0x2d0>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800480e:	2bc0      	cmp	r3, #192	; 0xc0
 8004810:	d016      	beq.n	8004840 <UART_SetConfig+0x1f0>
 8004812:	2bc0      	cmp	r3, #192	; 0xc0
 8004814:	d818      	bhi.n	8004848 <UART_SetConfig+0x1f8>
 8004816:	2b80      	cmp	r3, #128	; 0x80
 8004818:	d00a      	beq.n	8004830 <UART_SetConfig+0x1e0>
 800481a:	2b80      	cmp	r3, #128	; 0x80
 800481c:	d814      	bhi.n	8004848 <UART_SetConfig+0x1f8>
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <UART_SetConfig+0x1d8>
 8004822:	2b40      	cmp	r3, #64	; 0x40
 8004824:	d008      	beq.n	8004838 <UART_SetConfig+0x1e8>
 8004826:	e00f      	b.n	8004848 <UART_SetConfig+0x1f8>
 8004828:	2300      	movs	r3, #0
 800482a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482e:	e042      	b.n	80048b6 <UART_SetConfig+0x266>
 8004830:	2302      	movs	r3, #2
 8004832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004836:	e03e      	b.n	80048b6 <UART_SetConfig+0x266>
 8004838:	2304      	movs	r3, #4
 800483a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483e:	e03a      	b.n	80048b6 <UART_SetConfig+0x266>
 8004840:	2308      	movs	r3, #8
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004846:	e036      	b.n	80048b6 <UART_SetConfig+0x266>
 8004848:	2310      	movs	r3, #16
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484e:	e032      	b.n	80048b6 <UART_SetConfig+0x266>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a30      	ldr	r2, [pc, #192]	; (8004918 <UART_SetConfig+0x2c8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d12a      	bne.n	80048b0 <UART_SetConfig+0x260>
 800485a:	4b31      	ldr	r3, [pc, #196]	; (8004920 <UART_SetConfig+0x2d0>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004860:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004864:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004868:	d01a      	beq.n	80048a0 <UART_SetConfig+0x250>
 800486a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800486e:	d81b      	bhi.n	80048a8 <UART_SetConfig+0x258>
 8004870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004874:	d00c      	beq.n	8004890 <UART_SetConfig+0x240>
 8004876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800487a:	d815      	bhi.n	80048a8 <UART_SetConfig+0x258>
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <UART_SetConfig+0x238>
 8004880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004884:	d008      	beq.n	8004898 <UART_SetConfig+0x248>
 8004886:	e00f      	b.n	80048a8 <UART_SetConfig+0x258>
 8004888:	2300      	movs	r3, #0
 800488a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488e:	e012      	b.n	80048b6 <UART_SetConfig+0x266>
 8004890:	2302      	movs	r3, #2
 8004892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004896:	e00e      	b.n	80048b6 <UART_SetConfig+0x266>
 8004898:	2304      	movs	r3, #4
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489e:	e00a      	b.n	80048b6 <UART_SetConfig+0x266>
 80048a0:	2308      	movs	r3, #8
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a6:	e006      	b.n	80048b6 <UART_SetConfig+0x266>
 80048a8:	2310      	movs	r3, #16
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ae:	e002      	b.n	80048b6 <UART_SetConfig+0x266>
 80048b0:	2310      	movs	r3, #16
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a17      	ldr	r2, [pc, #92]	; (8004918 <UART_SetConfig+0x2c8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	f040 808b 	bne.w	80049d8 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d834      	bhi.n	8004934 <UART_SetConfig+0x2e4>
 80048ca:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <UART_SetConfig+0x280>)
 80048cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d0:	080048f5 	.word	0x080048f5
 80048d4:	08004935 	.word	0x08004935
 80048d8:	080048fd 	.word	0x080048fd
 80048dc:	08004935 	.word	0x08004935
 80048e0:	08004903 	.word	0x08004903
 80048e4:	08004935 	.word	0x08004935
 80048e8:	08004935 	.word	0x08004935
 80048ec:	08004935 	.word	0x08004935
 80048f0:	0800490b 	.word	0x0800490b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f4:	f7fd fe8e 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 80048f8:	61f8      	str	r0, [r7, #28]
        break;
 80048fa:	e021      	b.n	8004940 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <UART_SetConfig+0x2e0>)
 80048fe:	61fb      	str	r3, [r7, #28]
        break;
 8004900:	e01e      	b.n	8004940 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004902:	f7fd fdef 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8004906:	61f8      	str	r0, [r7, #28]
        break;
 8004908:	e01a      	b.n	8004940 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800490e:	61fb      	str	r3, [r7, #28]
        break;
 8004910:	e016      	b.n	8004940 <UART_SetConfig+0x2f0>
 8004912:	bf00      	nop
 8004914:	efff69f3 	.word	0xefff69f3
 8004918:	40008000 	.word	0x40008000
 800491c:	40013800 	.word	0x40013800
 8004920:	40021000 	.word	0x40021000
 8004924:	40004400 	.word	0x40004400
 8004928:	40004800 	.word	0x40004800
 800492c:	40004c00 	.word	0x40004c00
 8004930:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800493e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 80fa 	beq.w	8004b3c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	4413      	add	r3, r2
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	429a      	cmp	r2, r3
 8004956:	d305      	bcc.n	8004964 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	429a      	cmp	r2, r3
 8004962:	d903      	bls.n	800496c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800496a:	e0e7      	b.n	8004b3c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2200      	movs	r2, #0
 8004970:	461c      	mov	r4, r3
 8004972:	4615      	mov	r5, r2
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	022b      	lsls	r3, r5, #8
 800497e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004982:	0222      	lsls	r2, r4, #8
 8004984:	68f9      	ldr	r1, [r7, #12]
 8004986:	6849      	ldr	r1, [r1, #4]
 8004988:	0849      	lsrs	r1, r1, #1
 800498a:	2000      	movs	r0, #0
 800498c:	4688      	mov	r8, r1
 800498e:	4681      	mov	r9, r0
 8004990:	eb12 0a08 	adds.w	sl, r2, r8
 8004994:	eb43 0b09 	adc.w	fp, r3, r9
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049a6:	4650      	mov	r0, sl
 80049a8:	4659      	mov	r1, fp
 80049aa:	f7fb fc71 	bl	8000290 <__aeabi_uldivmod>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4613      	mov	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049bc:	d308      	bcc.n	80049d0 <UART_SetConfig+0x380>
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c4:	d204      	bcs.n	80049d0 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	60da      	str	r2, [r3, #12]
 80049ce:	e0b5      	b.n	8004b3c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049d6:	e0b1      	b.n	8004b3c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e0:	d15d      	bne.n	8004a9e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80049e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d827      	bhi.n	8004a3a <UART_SetConfig+0x3ea>
 80049ea:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <UART_SetConfig+0x3a0>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a15 	.word	0x08004a15
 80049f4:	08004a1d 	.word	0x08004a1d
 80049f8:	08004a25 	.word	0x08004a25
 80049fc:	08004a3b 	.word	0x08004a3b
 8004a00:	08004a2b 	.word	0x08004a2b
 8004a04:	08004a3b 	.word	0x08004a3b
 8004a08:	08004a3b 	.word	0x08004a3b
 8004a0c:	08004a3b 	.word	0x08004a3b
 8004a10:	08004a33 	.word	0x08004a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a14:	f7fd fdfe 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8004a18:	61f8      	str	r0, [r7, #28]
        break;
 8004a1a:	e014      	b.n	8004a46 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a1c:	f7fd fe10 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8004a20:	61f8      	str	r0, [r7, #28]
        break;
 8004a22:	e010      	b.n	8004a46 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a24:	4b4c      	ldr	r3, [pc, #304]	; (8004b58 <UART_SetConfig+0x508>)
 8004a26:	61fb      	str	r3, [r7, #28]
        break;
 8004a28:	e00d      	b.n	8004a46 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2a:	f7fd fd5b 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8004a2e:	61f8      	str	r0, [r7, #28]
        break;
 8004a30:	e009      	b.n	8004a46 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a36:	61fb      	str	r3, [r7, #28]
        break;
 8004a38:	e005      	b.n	8004a46 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d077      	beq.n	8004b3c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	005a      	lsls	r2, r3, #1
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	085b      	lsrs	r3, r3, #1
 8004a56:	441a      	add	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b0f      	cmp	r3, #15
 8004a66:	d916      	bls.n	8004a96 <UART_SetConfig+0x446>
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a6e:	d212      	bcs.n	8004a96 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f023 030f 	bic.w	r3, r3, #15
 8004a78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	8afb      	ldrh	r3, [r7, #22]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	8afa      	ldrh	r2, [r7, #22]
 8004a92:	60da      	str	r2, [r3, #12]
 8004a94:	e052      	b.n	8004b3c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a9c:	e04e      	b.n	8004b3c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d827      	bhi.n	8004af6 <UART_SetConfig+0x4a6>
 8004aa6:	a201      	add	r2, pc, #4	; (adr r2, 8004aac <UART_SetConfig+0x45c>)
 8004aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aac:	08004ad1 	.word	0x08004ad1
 8004ab0:	08004ad9 	.word	0x08004ad9
 8004ab4:	08004ae1 	.word	0x08004ae1
 8004ab8:	08004af7 	.word	0x08004af7
 8004abc:	08004ae7 	.word	0x08004ae7
 8004ac0:	08004af7 	.word	0x08004af7
 8004ac4:	08004af7 	.word	0x08004af7
 8004ac8:	08004af7 	.word	0x08004af7
 8004acc:	08004aef 	.word	0x08004aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad0:	f7fd fda0 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8004ad4:	61f8      	str	r0, [r7, #28]
        break;
 8004ad6:	e014      	b.n	8004b02 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ad8:	f7fd fdb2 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8004adc:	61f8      	str	r0, [r7, #28]
        break;
 8004ade:	e010      	b.n	8004b02 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	; (8004b58 <UART_SetConfig+0x508>)
 8004ae2:	61fb      	str	r3, [r7, #28]
        break;
 8004ae4:	e00d      	b.n	8004b02 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ae6:	f7fd fcfd 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8004aea:	61f8      	str	r0, [r7, #28]
        break;
 8004aec:	e009      	b.n	8004b02 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af2:	61fb      	str	r3, [r7, #28]
        break;
 8004af4:	e005      	b.n	8004b02 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b00:	bf00      	nop
    }

    if (pclk != 0U)
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d019      	beq.n	8004b3c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	085a      	lsrs	r2, r3, #1
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	441a      	add	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b0f      	cmp	r3, #15
 8004b20:	d909      	bls.n	8004b36 <UART_SetConfig+0x4e6>
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b28:	d205      	bcs.n	8004b36 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60da      	str	r2, [r3, #12]
 8004b34:	e002      	b.n	8004b3c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3728      	adds	r7, #40	; 0x28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b56:	bf00      	nop
 8004b58:	00f42400 	.word	0x00f42400

08004b5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01a      	beq.n	8004c72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c5a:	d10a      	bne.n	8004c72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	605a      	str	r2, [r3, #4]
  }
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cb0:	f7fc fb36 	bl	8001320 <HAL_GetTick>
 8004cb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d10e      	bne.n	8004ce2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f82d 	bl	8004d32 <UART_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e023      	b.n	8004d2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d10e      	bne.n	8004d0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f817 	bl	8004d32 <UART_WaitOnFlagUntilTimeout>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e00d      	b.n	8004d2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b09c      	sub	sp, #112	; 0x70
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	603b      	str	r3, [r7, #0]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d42:	e0a5      	b.n	8004e90 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4a:	f000 80a1 	beq.w	8004e90 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4e:	f7fc fae7 	bl	8001320 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d302      	bcc.n	8004d64 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d13e      	bne.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d78:	667b      	str	r3, [r7, #100]	; 0x64
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d84:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e6      	bne.n	8004d64 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da8:	f023 0301 	bic.w	r3, r3, #1
 8004dac:	663b      	str	r3, [r7, #96]	; 0x60
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3308      	adds	r3, #8
 8004db4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004db6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004db8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e5      	bne.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e067      	b.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d04f      	beq.n	8004e90 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dfe:	d147      	bne.n	8004e90 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e08:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
 8004e2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e30:	e841 2300 	strex	r3, r2, [r1]
 8004e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e6      	bne.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3308      	adds	r3, #8
 8004e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	e853 3f00 	ldrex	r3, [r3]
 8004e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f023 0301 	bic.w	r3, r3, #1
 8004e52:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3308      	adds	r3, #8
 8004e5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e5c:	623a      	str	r2, [r7, #32]
 8004e5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e60:	69f9      	ldr	r1, [r7, #28]
 8004e62:	6a3a      	ldr	r2, [r7, #32]
 8004e64:	e841 2300 	strex	r3, r2, [r1]
 8004e68:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e5      	bne.n	8004e3c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e010      	b.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69da      	ldr	r2, [r3, #28]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	bf0c      	ite	eq
 8004ea0:	2301      	moveq	r3, #1
 8004ea2:	2300      	movne	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	f43f af4a 	beq.w	8004d44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3770      	adds	r7, #112	; 0x70
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b097      	sub	sp, #92	; 0x5c
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	88fa      	ldrh	r2, [r7, #6]
 8004ed4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eee:	d10e      	bne.n	8004f0e <UART_Start_Receive_IT+0x52>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <UART_Start_Receive_IT+0x48>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004efe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f02:	e02d      	b.n	8004f60 <UART_Start_Receive_IT+0xa4>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	22ff      	movs	r2, #255	; 0xff
 8004f08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f0c:	e028      	b.n	8004f60 <UART_Start_Receive_IT+0xa4>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10d      	bne.n	8004f32 <UART_Start_Receive_IT+0x76>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d104      	bne.n	8004f28 <UART_Start_Receive_IT+0x6c>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	22ff      	movs	r2, #255	; 0xff
 8004f22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f26:	e01b      	b.n	8004f60 <UART_Start_Receive_IT+0xa4>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	227f      	movs	r2, #127	; 0x7f
 8004f2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f30:	e016      	b.n	8004f60 <UART_Start_Receive_IT+0xa4>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f3a:	d10d      	bne.n	8004f58 <UART_Start_Receive_IT+0x9c>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d104      	bne.n	8004f4e <UART_Start_Receive_IT+0x92>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	227f      	movs	r2, #127	; 0x7f
 8004f48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f4c:	e008      	b.n	8004f60 <UART_Start_Receive_IT+0xa4>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	223f      	movs	r2, #63	; 0x3f
 8004f52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f56:	e003      	b.n	8004f60 <UART_Start_Receive_IT+0xa4>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2222      	movs	r2, #34	; 0x22
 8004f6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3308      	adds	r3, #8
 8004f74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	f043 0301 	orr.w	r3, r3, #1
 8004f84:	657b      	str	r3, [r7, #84]	; 0x54
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e5      	bne.n	8004f6e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004faa:	d107      	bne.n	8004fbc <UART_Start_Receive_IT+0x100>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d103      	bne.n	8004fbc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4a24      	ldr	r2, [pc, #144]	; (8005048 <UART_Start_Receive_IT+0x18c>)
 8004fb8:	665a      	str	r2, [r3, #100]	; 0x64
 8004fba:	e002      	b.n	8004fc2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4a23      	ldr	r2, [pc, #140]	; (800504c <UART_Start_Receive_IT+0x190>)
 8004fc0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d019      	beq.n	8005006 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e6      	bne.n	8004fd2 <UART_Start_Receive_IT+0x116>
 8005004:	e018      	b.n	8005038 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	613b      	str	r3, [r7, #16]
   return(result);
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f043 0320 	orr.w	r3, r3, #32
 800501a:	653b      	str	r3, [r7, #80]	; 0x50
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005024:	623b      	str	r3, [r7, #32]
 8005026:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	69f9      	ldr	r1, [r7, #28]
 800502a:	6a3a      	ldr	r2, [r7, #32]
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	61bb      	str	r3, [r7, #24]
   return(result);
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e6      	bne.n	8005006 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	375c      	adds	r7, #92	; 0x5c
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	080052f7 	.word	0x080052f7
 800504c:	08005197 	.word	0x08005197

08005050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005050:	b480      	push	{r7}
 8005052:	b095      	sub	sp, #84	; 0x54
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800506c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005076:	643b      	str	r3, [r7, #64]	; 0x40
 8005078:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800507c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e6      	bne.n	8005058 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3308      	adds	r3, #8
 8005090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	61fb      	str	r3, [r7, #28]
   return(result);
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	f023 0301 	bic.w	r3, r3, #1
 80050a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3308      	adds	r3, #8
 80050a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e5      	bne.n	800508a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d118      	bne.n	80050f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	e853 3f00 	ldrex	r3, [r3]
 80050d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f023 0310 	bic.w	r3, r3, #16
 80050da:	647b      	str	r3, [r7, #68]	; 0x44
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	461a      	mov	r2, r3
 80050e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e8:	6979      	ldr	r1, [r7, #20]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	e841 2300 	strex	r3, r2, [r1]
 80050f0:	613b      	str	r3, [r7, #16]
   return(result);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e6      	bne.n	80050c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	665a      	str	r2, [r3, #100]	; 0x64
}
 800510a:	bf00      	nop
 800510c:	3754      	adds	r7, #84	; 0x54
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff fa75 	bl	8004624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800513a:	bf00      	nop
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b088      	sub	sp, #32
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	60bb      	str	r3, [r7, #8]
   return(result);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800515e:	61fb      	str	r3, [r7, #28]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	461a      	mov	r2, r3
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	6979      	ldr	r1, [r7, #20]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	613b      	str	r3, [r7, #16]
   return(result);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e6      	bne.n	800514a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff fa41 	bl	8004610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800518e:	bf00      	nop
 8005190:	3720      	adds	r7, #32
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b096      	sub	sp, #88	; 0x58
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ac:	2b22      	cmp	r3, #34	; 0x22
 80051ae:	f040 8094 	bne.w	80052da <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051bc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80051c0:	b2d9      	uxtb	r1, r3
 80051c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051cc:	400a      	ands	r2, r1
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d179      	bne.n	80052ee <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005202:	e853 3f00 	ldrex	r3, [r3]
 8005206:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800520e:	653b      	str	r3, [r7, #80]	; 0x50
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005218:	647b      	str	r3, [r7, #68]	; 0x44
 800521a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800521e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005220:	e841 2300 	strex	r3, r2, [r1]
 8005224:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e6      	bne.n	80051fa <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3308      	adds	r3, #8
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	623b      	str	r3, [r7, #32]
   return(result);
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	f023 0301 	bic.w	r3, r3, #1
 8005242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3308      	adds	r3, #8
 800524a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800524c:	633a      	str	r2, [r7, #48]	; 0x30
 800524e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e5      	bne.n	800522c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005270:	2b01      	cmp	r3, #1
 8005272:	d12e      	bne.n	80052d2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	60fb      	str	r3, [r7, #12]
   return(result);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0310 	bic.w	r3, r3, #16
 800528e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005298:	61fb      	str	r3, [r7, #28]
 800529a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	69b9      	ldr	r1, [r7, #24]
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	617b      	str	r3, [r7, #20]
   return(result);
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e6      	bne.n	800527a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d103      	bne.n	80052c2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2210      	movs	r2, #16
 80052c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052c8:	4619      	mov	r1, r3
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff f9b4 	bl	8004638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052d0:	e00d      	b.n	80052ee <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fb fae8 	bl	80008a8 <HAL_UART_RxCpltCallback>
}
 80052d8:	e009      	b.n	80052ee <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	8b1b      	ldrh	r3, [r3, #24]
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0208 	orr.w	r2, r2, #8
 80052ea:	b292      	uxth	r2, r2
 80052ec:	831a      	strh	r2, [r3, #24]
}
 80052ee:	bf00      	nop
 80052f0:	3758      	adds	r7, #88	; 0x58
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b096      	sub	sp, #88	; 0x58
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005304:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800530c:	2b22      	cmp	r3, #34	; 0x22
 800530e:	f040 8094 	bne.w	800543a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005318:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005322:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005326:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800532a:	4013      	ands	r3, r2
 800532c:	b29a      	uxth	r2, r3
 800532e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005330:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005336:	1c9a      	adds	r2, r3, #2
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005342:	b29b      	uxth	r3, r3
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d179      	bne.n	800544e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800536e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005378:	643b      	str	r3, [r7, #64]	; 0x40
 800537a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800537e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e6      	bne.n	800535a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3308      	adds	r3, #8
 8005392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	61fb      	str	r3, [r7, #28]
   return(result);
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f023 0301 	bic.w	r3, r3, #1
 80053a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3308      	adds	r3, #8
 80053aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e5      	bne.n	800538c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d12e      	bne.n	8005432 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f023 0310 	bic.w	r3, r3, #16
 80053ee:	647b      	str	r3, [r7, #68]	; 0x44
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	6979      	ldr	r1, [r7, #20]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	e841 2300 	strex	r3, r2, [r1]
 8005404:	613b      	str	r3, [r7, #16]
   return(result);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e6      	bne.n	80053da <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b10      	cmp	r3, #16
 8005418:	d103      	bne.n	8005422 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2210      	movs	r2, #16
 8005420:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005428:	4619      	mov	r1, r3
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff f904 	bl	8004638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005430:	e00d      	b.n	800544e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fb fa38 	bl	80008a8 <HAL_UART_RxCpltCallback>
}
 8005438:	e009      	b.n	800544e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	8b1b      	ldrh	r3, [r3, #24]
 8005440:	b29a      	uxth	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0208 	orr.w	r2, r2, #8
 800544a:	b292      	uxth	r2, r2
 800544c:	831a      	strh	r2, [r3, #24]
}
 800544e:	bf00      	nop
 8005450:	3758      	adds	r7, #88	; 0x58
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
	...

0800546c <__errno>:
 800546c:	4b01      	ldr	r3, [pc, #4]	; (8005474 <__errno+0x8>)
 800546e:	6818      	ldr	r0, [r3, #0]
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	20000010 	.word	0x20000010

08005478 <__libc_init_array>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	4d0d      	ldr	r5, [pc, #52]	; (80054b0 <__libc_init_array+0x38>)
 800547c:	4c0d      	ldr	r4, [pc, #52]	; (80054b4 <__libc_init_array+0x3c>)
 800547e:	1b64      	subs	r4, r4, r5
 8005480:	10a4      	asrs	r4, r4, #2
 8005482:	2600      	movs	r6, #0
 8005484:	42a6      	cmp	r6, r4
 8005486:	d109      	bne.n	800549c <__libc_init_array+0x24>
 8005488:	4d0b      	ldr	r5, [pc, #44]	; (80054b8 <__libc_init_array+0x40>)
 800548a:	4c0c      	ldr	r4, [pc, #48]	; (80054bc <__libc_init_array+0x44>)
 800548c:	f000 fca4 	bl	8005dd8 <_init>
 8005490:	1b64      	subs	r4, r4, r5
 8005492:	10a4      	asrs	r4, r4, #2
 8005494:	2600      	movs	r6, #0
 8005496:	42a6      	cmp	r6, r4
 8005498:	d105      	bne.n	80054a6 <__libc_init_array+0x2e>
 800549a:	bd70      	pop	{r4, r5, r6, pc}
 800549c:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a0:	4798      	blx	r3
 80054a2:	3601      	adds	r6, #1
 80054a4:	e7ee      	b.n	8005484 <__libc_init_array+0xc>
 80054a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054aa:	4798      	blx	r3
 80054ac:	3601      	adds	r6, #1
 80054ae:	e7f2      	b.n	8005496 <__libc_init_array+0x1e>
 80054b0:	08005f44 	.word	0x08005f44
 80054b4:	08005f44 	.word	0x08005f44
 80054b8:	08005f44 	.word	0x08005f44
 80054bc:	08005f48 	.word	0x08005f48

080054c0 <memset>:
 80054c0:	4402      	add	r2, r0
 80054c2:	4603      	mov	r3, r0
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d100      	bne.n	80054ca <memset+0xa>
 80054c8:	4770      	bx	lr
 80054ca:	f803 1b01 	strb.w	r1, [r3], #1
 80054ce:	e7f9      	b.n	80054c4 <memset+0x4>

080054d0 <siprintf>:
 80054d0:	b40e      	push	{r1, r2, r3}
 80054d2:	b500      	push	{lr}
 80054d4:	b09c      	sub	sp, #112	; 0x70
 80054d6:	ab1d      	add	r3, sp, #116	; 0x74
 80054d8:	9002      	str	r0, [sp, #8]
 80054da:	9006      	str	r0, [sp, #24]
 80054dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054e0:	4809      	ldr	r0, [pc, #36]	; (8005508 <siprintf+0x38>)
 80054e2:	9107      	str	r1, [sp, #28]
 80054e4:	9104      	str	r1, [sp, #16]
 80054e6:	4909      	ldr	r1, [pc, #36]	; (800550c <siprintf+0x3c>)
 80054e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ec:	9105      	str	r1, [sp, #20]
 80054ee:	6800      	ldr	r0, [r0, #0]
 80054f0:	9301      	str	r3, [sp, #4]
 80054f2:	a902      	add	r1, sp, #8
 80054f4:	f000 f87e 	bl	80055f4 <_svfiprintf_r>
 80054f8:	9b02      	ldr	r3, [sp, #8]
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	b01c      	add	sp, #112	; 0x70
 8005500:	f85d eb04 	ldr.w	lr, [sp], #4
 8005504:	b003      	add	sp, #12
 8005506:	4770      	bx	lr
 8005508:	20000010 	.word	0x20000010
 800550c:	ffff0208 	.word	0xffff0208

08005510 <strstr>:
 8005510:	780a      	ldrb	r2, [r1, #0]
 8005512:	b570      	push	{r4, r5, r6, lr}
 8005514:	b96a      	cbnz	r2, 8005532 <strstr+0x22>
 8005516:	bd70      	pop	{r4, r5, r6, pc}
 8005518:	429a      	cmp	r2, r3
 800551a:	d109      	bne.n	8005530 <strstr+0x20>
 800551c:	460c      	mov	r4, r1
 800551e:	4605      	mov	r5, r0
 8005520:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f6      	beq.n	8005516 <strstr+0x6>
 8005528:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800552c:	429e      	cmp	r6, r3
 800552e:	d0f7      	beq.n	8005520 <strstr+0x10>
 8005530:	3001      	adds	r0, #1
 8005532:	7803      	ldrb	r3, [r0, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1ef      	bne.n	8005518 <strstr+0x8>
 8005538:	4618      	mov	r0, r3
 800553a:	e7ec      	b.n	8005516 <strstr+0x6>

0800553c <__ssputs_r>:
 800553c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005540:	688e      	ldr	r6, [r1, #8]
 8005542:	429e      	cmp	r6, r3
 8005544:	4682      	mov	sl, r0
 8005546:	460c      	mov	r4, r1
 8005548:	4690      	mov	r8, r2
 800554a:	461f      	mov	r7, r3
 800554c:	d838      	bhi.n	80055c0 <__ssputs_r+0x84>
 800554e:	898a      	ldrh	r2, [r1, #12]
 8005550:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005554:	d032      	beq.n	80055bc <__ssputs_r+0x80>
 8005556:	6825      	ldr	r5, [r4, #0]
 8005558:	6909      	ldr	r1, [r1, #16]
 800555a:	eba5 0901 	sub.w	r9, r5, r1
 800555e:	6965      	ldr	r5, [r4, #20]
 8005560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005564:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005568:	3301      	adds	r3, #1
 800556a:	444b      	add	r3, r9
 800556c:	106d      	asrs	r5, r5, #1
 800556e:	429d      	cmp	r5, r3
 8005570:	bf38      	it	cc
 8005572:	461d      	movcc	r5, r3
 8005574:	0553      	lsls	r3, r2, #21
 8005576:	d531      	bpl.n	80055dc <__ssputs_r+0xa0>
 8005578:	4629      	mov	r1, r5
 800557a:	f000 fb63 	bl	8005c44 <_malloc_r>
 800557e:	4606      	mov	r6, r0
 8005580:	b950      	cbnz	r0, 8005598 <__ssputs_r+0x5c>
 8005582:	230c      	movs	r3, #12
 8005584:	f8ca 3000 	str.w	r3, [sl]
 8005588:	89a3      	ldrh	r3, [r4, #12]
 800558a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800558e:	81a3      	strh	r3, [r4, #12]
 8005590:	f04f 30ff 	mov.w	r0, #4294967295
 8005594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005598:	6921      	ldr	r1, [r4, #16]
 800559a:	464a      	mov	r2, r9
 800559c:	f000 fabe 	bl	8005b1c <memcpy>
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055aa:	81a3      	strh	r3, [r4, #12]
 80055ac:	6126      	str	r6, [r4, #16]
 80055ae:	6165      	str	r5, [r4, #20]
 80055b0:	444e      	add	r6, r9
 80055b2:	eba5 0509 	sub.w	r5, r5, r9
 80055b6:	6026      	str	r6, [r4, #0]
 80055b8:	60a5      	str	r5, [r4, #8]
 80055ba:	463e      	mov	r6, r7
 80055bc:	42be      	cmp	r6, r7
 80055be:	d900      	bls.n	80055c2 <__ssputs_r+0x86>
 80055c0:	463e      	mov	r6, r7
 80055c2:	6820      	ldr	r0, [r4, #0]
 80055c4:	4632      	mov	r2, r6
 80055c6:	4641      	mov	r1, r8
 80055c8:	f000 fab6 	bl	8005b38 <memmove>
 80055cc:	68a3      	ldr	r3, [r4, #8]
 80055ce:	1b9b      	subs	r3, r3, r6
 80055d0:	60a3      	str	r3, [r4, #8]
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	4433      	add	r3, r6
 80055d6:	6023      	str	r3, [r4, #0]
 80055d8:	2000      	movs	r0, #0
 80055da:	e7db      	b.n	8005594 <__ssputs_r+0x58>
 80055dc:	462a      	mov	r2, r5
 80055de:	f000 fba5 	bl	8005d2c <_realloc_r>
 80055e2:	4606      	mov	r6, r0
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d1e1      	bne.n	80055ac <__ssputs_r+0x70>
 80055e8:	6921      	ldr	r1, [r4, #16]
 80055ea:	4650      	mov	r0, sl
 80055ec:	f000 fabe 	bl	8005b6c <_free_r>
 80055f0:	e7c7      	b.n	8005582 <__ssputs_r+0x46>
	...

080055f4 <_svfiprintf_r>:
 80055f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f8:	4698      	mov	r8, r3
 80055fa:	898b      	ldrh	r3, [r1, #12]
 80055fc:	061b      	lsls	r3, r3, #24
 80055fe:	b09d      	sub	sp, #116	; 0x74
 8005600:	4607      	mov	r7, r0
 8005602:	460d      	mov	r5, r1
 8005604:	4614      	mov	r4, r2
 8005606:	d50e      	bpl.n	8005626 <_svfiprintf_r+0x32>
 8005608:	690b      	ldr	r3, [r1, #16]
 800560a:	b963      	cbnz	r3, 8005626 <_svfiprintf_r+0x32>
 800560c:	2140      	movs	r1, #64	; 0x40
 800560e:	f000 fb19 	bl	8005c44 <_malloc_r>
 8005612:	6028      	str	r0, [r5, #0]
 8005614:	6128      	str	r0, [r5, #16]
 8005616:	b920      	cbnz	r0, 8005622 <_svfiprintf_r+0x2e>
 8005618:	230c      	movs	r3, #12
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	f04f 30ff 	mov.w	r0, #4294967295
 8005620:	e0d1      	b.n	80057c6 <_svfiprintf_r+0x1d2>
 8005622:	2340      	movs	r3, #64	; 0x40
 8005624:	616b      	str	r3, [r5, #20]
 8005626:	2300      	movs	r3, #0
 8005628:	9309      	str	r3, [sp, #36]	; 0x24
 800562a:	2320      	movs	r3, #32
 800562c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005630:	f8cd 800c 	str.w	r8, [sp, #12]
 8005634:	2330      	movs	r3, #48	; 0x30
 8005636:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057e0 <_svfiprintf_r+0x1ec>
 800563a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800563e:	f04f 0901 	mov.w	r9, #1
 8005642:	4623      	mov	r3, r4
 8005644:	469a      	mov	sl, r3
 8005646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800564a:	b10a      	cbz	r2, 8005650 <_svfiprintf_r+0x5c>
 800564c:	2a25      	cmp	r2, #37	; 0x25
 800564e:	d1f9      	bne.n	8005644 <_svfiprintf_r+0x50>
 8005650:	ebba 0b04 	subs.w	fp, sl, r4
 8005654:	d00b      	beq.n	800566e <_svfiprintf_r+0x7a>
 8005656:	465b      	mov	r3, fp
 8005658:	4622      	mov	r2, r4
 800565a:	4629      	mov	r1, r5
 800565c:	4638      	mov	r0, r7
 800565e:	f7ff ff6d 	bl	800553c <__ssputs_r>
 8005662:	3001      	adds	r0, #1
 8005664:	f000 80aa 	beq.w	80057bc <_svfiprintf_r+0x1c8>
 8005668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800566a:	445a      	add	r2, fp
 800566c:	9209      	str	r2, [sp, #36]	; 0x24
 800566e:	f89a 3000 	ldrb.w	r3, [sl]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 80a2 	beq.w	80057bc <_svfiprintf_r+0x1c8>
 8005678:	2300      	movs	r3, #0
 800567a:	f04f 32ff 	mov.w	r2, #4294967295
 800567e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005682:	f10a 0a01 	add.w	sl, sl, #1
 8005686:	9304      	str	r3, [sp, #16]
 8005688:	9307      	str	r3, [sp, #28]
 800568a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800568e:	931a      	str	r3, [sp, #104]	; 0x68
 8005690:	4654      	mov	r4, sl
 8005692:	2205      	movs	r2, #5
 8005694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005698:	4851      	ldr	r0, [pc, #324]	; (80057e0 <_svfiprintf_r+0x1ec>)
 800569a:	f7fa fda9 	bl	80001f0 <memchr>
 800569e:	9a04      	ldr	r2, [sp, #16]
 80056a0:	b9d8      	cbnz	r0, 80056da <_svfiprintf_r+0xe6>
 80056a2:	06d0      	lsls	r0, r2, #27
 80056a4:	bf44      	itt	mi
 80056a6:	2320      	movmi	r3, #32
 80056a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056ac:	0711      	lsls	r1, r2, #28
 80056ae:	bf44      	itt	mi
 80056b0:	232b      	movmi	r3, #43	; 0x2b
 80056b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b6:	f89a 3000 	ldrb.w	r3, [sl]
 80056ba:	2b2a      	cmp	r3, #42	; 0x2a
 80056bc:	d015      	beq.n	80056ea <_svfiprintf_r+0xf6>
 80056be:	9a07      	ldr	r2, [sp, #28]
 80056c0:	4654      	mov	r4, sl
 80056c2:	2000      	movs	r0, #0
 80056c4:	f04f 0c0a 	mov.w	ip, #10
 80056c8:	4621      	mov	r1, r4
 80056ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ce:	3b30      	subs	r3, #48	; 0x30
 80056d0:	2b09      	cmp	r3, #9
 80056d2:	d94e      	bls.n	8005772 <_svfiprintf_r+0x17e>
 80056d4:	b1b0      	cbz	r0, 8005704 <_svfiprintf_r+0x110>
 80056d6:	9207      	str	r2, [sp, #28]
 80056d8:	e014      	b.n	8005704 <_svfiprintf_r+0x110>
 80056da:	eba0 0308 	sub.w	r3, r0, r8
 80056de:	fa09 f303 	lsl.w	r3, r9, r3
 80056e2:	4313      	orrs	r3, r2
 80056e4:	9304      	str	r3, [sp, #16]
 80056e6:	46a2      	mov	sl, r4
 80056e8:	e7d2      	b.n	8005690 <_svfiprintf_r+0x9c>
 80056ea:	9b03      	ldr	r3, [sp, #12]
 80056ec:	1d19      	adds	r1, r3, #4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	9103      	str	r1, [sp, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bfbb      	ittet	lt
 80056f6:	425b      	neglt	r3, r3
 80056f8:	f042 0202 	orrlt.w	r2, r2, #2
 80056fc:	9307      	strge	r3, [sp, #28]
 80056fe:	9307      	strlt	r3, [sp, #28]
 8005700:	bfb8      	it	lt
 8005702:	9204      	strlt	r2, [sp, #16]
 8005704:	7823      	ldrb	r3, [r4, #0]
 8005706:	2b2e      	cmp	r3, #46	; 0x2e
 8005708:	d10c      	bne.n	8005724 <_svfiprintf_r+0x130>
 800570a:	7863      	ldrb	r3, [r4, #1]
 800570c:	2b2a      	cmp	r3, #42	; 0x2a
 800570e:	d135      	bne.n	800577c <_svfiprintf_r+0x188>
 8005710:	9b03      	ldr	r3, [sp, #12]
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	9203      	str	r2, [sp, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	bfb8      	it	lt
 800571c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005720:	3402      	adds	r4, #2
 8005722:	9305      	str	r3, [sp, #20]
 8005724:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057f0 <_svfiprintf_r+0x1fc>
 8005728:	7821      	ldrb	r1, [r4, #0]
 800572a:	2203      	movs	r2, #3
 800572c:	4650      	mov	r0, sl
 800572e:	f7fa fd5f 	bl	80001f0 <memchr>
 8005732:	b140      	cbz	r0, 8005746 <_svfiprintf_r+0x152>
 8005734:	2340      	movs	r3, #64	; 0x40
 8005736:	eba0 000a 	sub.w	r0, r0, sl
 800573a:	fa03 f000 	lsl.w	r0, r3, r0
 800573e:	9b04      	ldr	r3, [sp, #16]
 8005740:	4303      	orrs	r3, r0
 8005742:	3401      	adds	r4, #1
 8005744:	9304      	str	r3, [sp, #16]
 8005746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800574a:	4826      	ldr	r0, [pc, #152]	; (80057e4 <_svfiprintf_r+0x1f0>)
 800574c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005750:	2206      	movs	r2, #6
 8005752:	f7fa fd4d 	bl	80001f0 <memchr>
 8005756:	2800      	cmp	r0, #0
 8005758:	d038      	beq.n	80057cc <_svfiprintf_r+0x1d8>
 800575a:	4b23      	ldr	r3, [pc, #140]	; (80057e8 <_svfiprintf_r+0x1f4>)
 800575c:	bb1b      	cbnz	r3, 80057a6 <_svfiprintf_r+0x1b2>
 800575e:	9b03      	ldr	r3, [sp, #12]
 8005760:	3307      	adds	r3, #7
 8005762:	f023 0307 	bic.w	r3, r3, #7
 8005766:	3308      	adds	r3, #8
 8005768:	9303      	str	r3, [sp, #12]
 800576a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800576c:	4433      	add	r3, r6
 800576e:	9309      	str	r3, [sp, #36]	; 0x24
 8005770:	e767      	b.n	8005642 <_svfiprintf_r+0x4e>
 8005772:	fb0c 3202 	mla	r2, ip, r2, r3
 8005776:	460c      	mov	r4, r1
 8005778:	2001      	movs	r0, #1
 800577a:	e7a5      	b.n	80056c8 <_svfiprintf_r+0xd4>
 800577c:	2300      	movs	r3, #0
 800577e:	3401      	adds	r4, #1
 8005780:	9305      	str	r3, [sp, #20]
 8005782:	4619      	mov	r1, r3
 8005784:	f04f 0c0a 	mov.w	ip, #10
 8005788:	4620      	mov	r0, r4
 800578a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800578e:	3a30      	subs	r2, #48	; 0x30
 8005790:	2a09      	cmp	r2, #9
 8005792:	d903      	bls.n	800579c <_svfiprintf_r+0x1a8>
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0c5      	beq.n	8005724 <_svfiprintf_r+0x130>
 8005798:	9105      	str	r1, [sp, #20]
 800579a:	e7c3      	b.n	8005724 <_svfiprintf_r+0x130>
 800579c:	fb0c 2101 	mla	r1, ip, r1, r2
 80057a0:	4604      	mov	r4, r0
 80057a2:	2301      	movs	r3, #1
 80057a4:	e7f0      	b.n	8005788 <_svfiprintf_r+0x194>
 80057a6:	ab03      	add	r3, sp, #12
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	462a      	mov	r2, r5
 80057ac:	4b0f      	ldr	r3, [pc, #60]	; (80057ec <_svfiprintf_r+0x1f8>)
 80057ae:	a904      	add	r1, sp, #16
 80057b0:	4638      	mov	r0, r7
 80057b2:	f3af 8000 	nop.w
 80057b6:	1c42      	adds	r2, r0, #1
 80057b8:	4606      	mov	r6, r0
 80057ba:	d1d6      	bne.n	800576a <_svfiprintf_r+0x176>
 80057bc:	89ab      	ldrh	r3, [r5, #12]
 80057be:	065b      	lsls	r3, r3, #25
 80057c0:	f53f af2c 	bmi.w	800561c <_svfiprintf_r+0x28>
 80057c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057c6:	b01d      	add	sp, #116	; 0x74
 80057c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057cc:	ab03      	add	r3, sp, #12
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	462a      	mov	r2, r5
 80057d2:	4b06      	ldr	r3, [pc, #24]	; (80057ec <_svfiprintf_r+0x1f8>)
 80057d4:	a904      	add	r1, sp, #16
 80057d6:	4638      	mov	r0, r7
 80057d8:	f000 f87a 	bl	80058d0 <_printf_i>
 80057dc:	e7eb      	b.n	80057b6 <_svfiprintf_r+0x1c2>
 80057de:	bf00      	nop
 80057e0:	08005f08 	.word	0x08005f08
 80057e4:	08005f12 	.word	0x08005f12
 80057e8:	00000000 	.word	0x00000000
 80057ec:	0800553d 	.word	0x0800553d
 80057f0:	08005f0e 	.word	0x08005f0e

080057f4 <_printf_common>:
 80057f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f8:	4616      	mov	r6, r2
 80057fa:	4699      	mov	r9, r3
 80057fc:	688a      	ldr	r2, [r1, #8]
 80057fe:	690b      	ldr	r3, [r1, #16]
 8005800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005804:	4293      	cmp	r3, r2
 8005806:	bfb8      	it	lt
 8005808:	4613      	movlt	r3, r2
 800580a:	6033      	str	r3, [r6, #0]
 800580c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005810:	4607      	mov	r7, r0
 8005812:	460c      	mov	r4, r1
 8005814:	b10a      	cbz	r2, 800581a <_printf_common+0x26>
 8005816:	3301      	adds	r3, #1
 8005818:	6033      	str	r3, [r6, #0]
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	0699      	lsls	r1, r3, #26
 800581e:	bf42      	ittt	mi
 8005820:	6833      	ldrmi	r3, [r6, #0]
 8005822:	3302      	addmi	r3, #2
 8005824:	6033      	strmi	r3, [r6, #0]
 8005826:	6825      	ldr	r5, [r4, #0]
 8005828:	f015 0506 	ands.w	r5, r5, #6
 800582c:	d106      	bne.n	800583c <_printf_common+0x48>
 800582e:	f104 0a19 	add.w	sl, r4, #25
 8005832:	68e3      	ldr	r3, [r4, #12]
 8005834:	6832      	ldr	r2, [r6, #0]
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	42ab      	cmp	r3, r5
 800583a:	dc26      	bgt.n	800588a <_printf_common+0x96>
 800583c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005840:	1e13      	subs	r3, r2, #0
 8005842:	6822      	ldr	r2, [r4, #0]
 8005844:	bf18      	it	ne
 8005846:	2301      	movne	r3, #1
 8005848:	0692      	lsls	r2, r2, #26
 800584a:	d42b      	bmi.n	80058a4 <_printf_common+0xb0>
 800584c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005850:	4649      	mov	r1, r9
 8005852:	4638      	mov	r0, r7
 8005854:	47c0      	blx	r8
 8005856:	3001      	adds	r0, #1
 8005858:	d01e      	beq.n	8005898 <_printf_common+0xa4>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	68e5      	ldr	r5, [r4, #12]
 800585e:	6832      	ldr	r2, [r6, #0]
 8005860:	f003 0306 	and.w	r3, r3, #6
 8005864:	2b04      	cmp	r3, #4
 8005866:	bf08      	it	eq
 8005868:	1aad      	subeq	r5, r5, r2
 800586a:	68a3      	ldr	r3, [r4, #8]
 800586c:	6922      	ldr	r2, [r4, #16]
 800586e:	bf0c      	ite	eq
 8005870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005874:	2500      	movne	r5, #0
 8005876:	4293      	cmp	r3, r2
 8005878:	bfc4      	itt	gt
 800587a:	1a9b      	subgt	r3, r3, r2
 800587c:	18ed      	addgt	r5, r5, r3
 800587e:	2600      	movs	r6, #0
 8005880:	341a      	adds	r4, #26
 8005882:	42b5      	cmp	r5, r6
 8005884:	d11a      	bne.n	80058bc <_printf_common+0xc8>
 8005886:	2000      	movs	r0, #0
 8005888:	e008      	b.n	800589c <_printf_common+0xa8>
 800588a:	2301      	movs	r3, #1
 800588c:	4652      	mov	r2, sl
 800588e:	4649      	mov	r1, r9
 8005890:	4638      	mov	r0, r7
 8005892:	47c0      	blx	r8
 8005894:	3001      	adds	r0, #1
 8005896:	d103      	bne.n	80058a0 <_printf_common+0xac>
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a0:	3501      	adds	r5, #1
 80058a2:	e7c6      	b.n	8005832 <_printf_common+0x3e>
 80058a4:	18e1      	adds	r1, r4, r3
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	2030      	movs	r0, #48	; 0x30
 80058aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ae:	4422      	add	r2, r4
 80058b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058b8:	3302      	adds	r3, #2
 80058ba:	e7c7      	b.n	800584c <_printf_common+0x58>
 80058bc:	2301      	movs	r3, #1
 80058be:	4622      	mov	r2, r4
 80058c0:	4649      	mov	r1, r9
 80058c2:	4638      	mov	r0, r7
 80058c4:	47c0      	blx	r8
 80058c6:	3001      	adds	r0, #1
 80058c8:	d0e6      	beq.n	8005898 <_printf_common+0xa4>
 80058ca:	3601      	adds	r6, #1
 80058cc:	e7d9      	b.n	8005882 <_printf_common+0x8e>
	...

080058d0 <_printf_i>:
 80058d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d4:	7e0f      	ldrb	r7, [r1, #24]
 80058d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058d8:	2f78      	cmp	r7, #120	; 0x78
 80058da:	4691      	mov	r9, r2
 80058dc:	4680      	mov	r8, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	469a      	mov	sl, r3
 80058e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058e6:	d807      	bhi.n	80058f8 <_printf_i+0x28>
 80058e8:	2f62      	cmp	r7, #98	; 0x62
 80058ea:	d80a      	bhi.n	8005902 <_printf_i+0x32>
 80058ec:	2f00      	cmp	r7, #0
 80058ee:	f000 80d8 	beq.w	8005aa2 <_printf_i+0x1d2>
 80058f2:	2f58      	cmp	r7, #88	; 0x58
 80058f4:	f000 80a3 	beq.w	8005a3e <_printf_i+0x16e>
 80058f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005900:	e03a      	b.n	8005978 <_printf_i+0xa8>
 8005902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005906:	2b15      	cmp	r3, #21
 8005908:	d8f6      	bhi.n	80058f8 <_printf_i+0x28>
 800590a:	a101      	add	r1, pc, #4	; (adr r1, 8005910 <_printf_i+0x40>)
 800590c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005910:	08005969 	.word	0x08005969
 8005914:	0800597d 	.word	0x0800597d
 8005918:	080058f9 	.word	0x080058f9
 800591c:	080058f9 	.word	0x080058f9
 8005920:	080058f9 	.word	0x080058f9
 8005924:	080058f9 	.word	0x080058f9
 8005928:	0800597d 	.word	0x0800597d
 800592c:	080058f9 	.word	0x080058f9
 8005930:	080058f9 	.word	0x080058f9
 8005934:	080058f9 	.word	0x080058f9
 8005938:	080058f9 	.word	0x080058f9
 800593c:	08005a89 	.word	0x08005a89
 8005940:	080059ad 	.word	0x080059ad
 8005944:	08005a6b 	.word	0x08005a6b
 8005948:	080058f9 	.word	0x080058f9
 800594c:	080058f9 	.word	0x080058f9
 8005950:	08005aab 	.word	0x08005aab
 8005954:	080058f9 	.word	0x080058f9
 8005958:	080059ad 	.word	0x080059ad
 800595c:	080058f9 	.word	0x080058f9
 8005960:	080058f9 	.word	0x080058f9
 8005964:	08005a73 	.word	0x08005a73
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	1d1a      	adds	r2, r3, #4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	602a      	str	r2, [r5, #0]
 8005970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005978:	2301      	movs	r3, #1
 800597a:	e0a3      	b.n	8005ac4 <_printf_i+0x1f4>
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	6829      	ldr	r1, [r5, #0]
 8005980:	0606      	lsls	r6, r0, #24
 8005982:	f101 0304 	add.w	r3, r1, #4
 8005986:	d50a      	bpl.n	800599e <_printf_i+0xce>
 8005988:	680e      	ldr	r6, [r1, #0]
 800598a:	602b      	str	r3, [r5, #0]
 800598c:	2e00      	cmp	r6, #0
 800598e:	da03      	bge.n	8005998 <_printf_i+0xc8>
 8005990:	232d      	movs	r3, #45	; 0x2d
 8005992:	4276      	negs	r6, r6
 8005994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005998:	485e      	ldr	r0, [pc, #376]	; (8005b14 <_printf_i+0x244>)
 800599a:	230a      	movs	r3, #10
 800599c:	e019      	b.n	80059d2 <_printf_i+0x102>
 800599e:	680e      	ldr	r6, [r1, #0]
 80059a0:	602b      	str	r3, [r5, #0]
 80059a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059a6:	bf18      	it	ne
 80059a8:	b236      	sxthne	r6, r6
 80059aa:	e7ef      	b.n	800598c <_printf_i+0xbc>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	6820      	ldr	r0, [r4, #0]
 80059b0:	1d19      	adds	r1, r3, #4
 80059b2:	6029      	str	r1, [r5, #0]
 80059b4:	0601      	lsls	r1, r0, #24
 80059b6:	d501      	bpl.n	80059bc <_printf_i+0xec>
 80059b8:	681e      	ldr	r6, [r3, #0]
 80059ba:	e002      	b.n	80059c2 <_printf_i+0xf2>
 80059bc:	0646      	lsls	r6, r0, #25
 80059be:	d5fb      	bpl.n	80059b8 <_printf_i+0xe8>
 80059c0:	881e      	ldrh	r6, [r3, #0]
 80059c2:	4854      	ldr	r0, [pc, #336]	; (8005b14 <_printf_i+0x244>)
 80059c4:	2f6f      	cmp	r7, #111	; 0x6f
 80059c6:	bf0c      	ite	eq
 80059c8:	2308      	moveq	r3, #8
 80059ca:	230a      	movne	r3, #10
 80059cc:	2100      	movs	r1, #0
 80059ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059d2:	6865      	ldr	r5, [r4, #4]
 80059d4:	60a5      	str	r5, [r4, #8]
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	bfa2      	ittt	ge
 80059da:	6821      	ldrge	r1, [r4, #0]
 80059dc:	f021 0104 	bicge.w	r1, r1, #4
 80059e0:	6021      	strge	r1, [r4, #0]
 80059e2:	b90e      	cbnz	r6, 80059e8 <_printf_i+0x118>
 80059e4:	2d00      	cmp	r5, #0
 80059e6:	d04d      	beq.n	8005a84 <_printf_i+0x1b4>
 80059e8:	4615      	mov	r5, r2
 80059ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ee:	fb03 6711 	mls	r7, r3, r1, r6
 80059f2:	5dc7      	ldrb	r7, [r0, r7]
 80059f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059f8:	4637      	mov	r7, r6
 80059fa:	42bb      	cmp	r3, r7
 80059fc:	460e      	mov	r6, r1
 80059fe:	d9f4      	bls.n	80059ea <_printf_i+0x11a>
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d10b      	bne.n	8005a1c <_printf_i+0x14c>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	07de      	lsls	r6, r3, #31
 8005a08:	d508      	bpl.n	8005a1c <_printf_i+0x14c>
 8005a0a:	6923      	ldr	r3, [r4, #16]
 8005a0c:	6861      	ldr	r1, [r4, #4]
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	bfde      	ittt	le
 8005a12:	2330      	movle	r3, #48	; 0x30
 8005a14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a1c:	1b52      	subs	r2, r2, r5
 8005a1e:	6122      	str	r2, [r4, #16]
 8005a20:	f8cd a000 	str.w	sl, [sp]
 8005a24:	464b      	mov	r3, r9
 8005a26:	aa03      	add	r2, sp, #12
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	f7ff fee2 	bl	80057f4 <_printf_common>
 8005a30:	3001      	adds	r0, #1
 8005a32:	d14c      	bne.n	8005ace <_printf_i+0x1fe>
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	b004      	add	sp, #16
 8005a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3e:	4835      	ldr	r0, [pc, #212]	; (8005b14 <_printf_i+0x244>)
 8005a40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a44:	6829      	ldr	r1, [r5, #0]
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a4c:	6029      	str	r1, [r5, #0]
 8005a4e:	061d      	lsls	r5, r3, #24
 8005a50:	d514      	bpl.n	8005a7c <_printf_i+0x1ac>
 8005a52:	07df      	lsls	r7, r3, #31
 8005a54:	bf44      	itt	mi
 8005a56:	f043 0320 	orrmi.w	r3, r3, #32
 8005a5a:	6023      	strmi	r3, [r4, #0]
 8005a5c:	b91e      	cbnz	r6, 8005a66 <_printf_i+0x196>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	f023 0320 	bic.w	r3, r3, #32
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	2310      	movs	r3, #16
 8005a68:	e7b0      	b.n	80059cc <_printf_i+0xfc>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	f043 0320 	orr.w	r3, r3, #32
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	2378      	movs	r3, #120	; 0x78
 8005a74:	4828      	ldr	r0, [pc, #160]	; (8005b18 <_printf_i+0x248>)
 8005a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a7a:	e7e3      	b.n	8005a44 <_printf_i+0x174>
 8005a7c:	0659      	lsls	r1, r3, #25
 8005a7e:	bf48      	it	mi
 8005a80:	b2b6      	uxthmi	r6, r6
 8005a82:	e7e6      	b.n	8005a52 <_printf_i+0x182>
 8005a84:	4615      	mov	r5, r2
 8005a86:	e7bb      	b.n	8005a00 <_printf_i+0x130>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	6826      	ldr	r6, [r4, #0]
 8005a8c:	6961      	ldr	r1, [r4, #20]
 8005a8e:	1d18      	adds	r0, r3, #4
 8005a90:	6028      	str	r0, [r5, #0]
 8005a92:	0635      	lsls	r5, r6, #24
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	d501      	bpl.n	8005a9c <_printf_i+0x1cc>
 8005a98:	6019      	str	r1, [r3, #0]
 8005a9a:	e002      	b.n	8005aa2 <_printf_i+0x1d2>
 8005a9c:	0670      	lsls	r0, r6, #25
 8005a9e:	d5fb      	bpl.n	8005a98 <_printf_i+0x1c8>
 8005aa0:	8019      	strh	r1, [r3, #0]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	6123      	str	r3, [r4, #16]
 8005aa6:	4615      	mov	r5, r2
 8005aa8:	e7ba      	b.n	8005a20 <_printf_i+0x150>
 8005aaa:	682b      	ldr	r3, [r5, #0]
 8005aac:	1d1a      	adds	r2, r3, #4
 8005aae:	602a      	str	r2, [r5, #0]
 8005ab0:	681d      	ldr	r5, [r3, #0]
 8005ab2:	6862      	ldr	r2, [r4, #4]
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f7fa fb9a 	bl	80001f0 <memchr>
 8005abc:	b108      	cbz	r0, 8005ac2 <_printf_i+0x1f2>
 8005abe:	1b40      	subs	r0, r0, r5
 8005ac0:	6060      	str	r0, [r4, #4]
 8005ac2:	6863      	ldr	r3, [r4, #4]
 8005ac4:	6123      	str	r3, [r4, #16]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005acc:	e7a8      	b.n	8005a20 <_printf_i+0x150>
 8005ace:	6923      	ldr	r3, [r4, #16]
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	47d0      	blx	sl
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d0ab      	beq.n	8005a34 <_printf_i+0x164>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	079b      	lsls	r3, r3, #30
 8005ae0:	d413      	bmi.n	8005b0a <_printf_i+0x23a>
 8005ae2:	68e0      	ldr	r0, [r4, #12]
 8005ae4:	9b03      	ldr	r3, [sp, #12]
 8005ae6:	4298      	cmp	r0, r3
 8005ae8:	bfb8      	it	lt
 8005aea:	4618      	movlt	r0, r3
 8005aec:	e7a4      	b.n	8005a38 <_printf_i+0x168>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4632      	mov	r2, r6
 8005af2:	4649      	mov	r1, r9
 8005af4:	4640      	mov	r0, r8
 8005af6:	47d0      	blx	sl
 8005af8:	3001      	adds	r0, #1
 8005afa:	d09b      	beq.n	8005a34 <_printf_i+0x164>
 8005afc:	3501      	adds	r5, #1
 8005afe:	68e3      	ldr	r3, [r4, #12]
 8005b00:	9903      	ldr	r1, [sp, #12]
 8005b02:	1a5b      	subs	r3, r3, r1
 8005b04:	42ab      	cmp	r3, r5
 8005b06:	dcf2      	bgt.n	8005aee <_printf_i+0x21e>
 8005b08:	e7eb      	b.n	8005ae2 <_printf_i+0x212>
 8005b0a:	2500      	movs	r5, #0
 8005b0c:	f104 0619 	add.w	r6, r4, #25
 8005b10:	e7f5      	b.n	8005afe <_printf_i+0x22e>
 8005b12:	bf00      	nop
 8005b14:	08005f19 	.word	0x08005f19
 8005b18:	08005f2a 	.word	0x08005f2a

08005b1c <memcpy>:
 8005b1c:	440a      	add	r2, r1
 8005b1e:	4291      	cmp	r1, r2
 8005b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b24:	d100      	bne.n	8005b28 <memcpy+0xc>
 8005b26:	4770      	bx	lr
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b32:	4291      	cmp	r1, r2
 8005b34:	d1f9      	bne.n	8005b2a <memcpy+0xe>
 8005b36:	bd10      	pop	{r4, pc}

08005b38 <memmove>:
 8005b38:	4288      	cmp	r0, r1
 8005b3a:	b510      	push	{r4, lr}
 8005b3c:	eb01 0402 	add.w	r4, r1, r2
 8005b40:	d902      	bls.n	8005b48 <memmove+0x10>
 8005b42:	4284      	cmp	r4, r0
 8005b44:	4623      	mov	r3, r4
 8005b46:	d807      	bhi.n	8005b58 <memmove+0x20>
 8005b48:	1e43      	subs	r3, r0, #1
 8005b4a:	42a1      	cmp	r1, r4
 8005b4c:	d008      	beq.n	8005b60 <memmove+0x28>
 8005b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b56:	e7f8      	b.n	8005b4a <memmove+0x12>
 8005b58:	4402      	add	r2, r0
 8005b5a:	4601      	mov	r1, r0
 8005b5c:	428a      	cmp	r2, r1
 8005b5e:	d100      	bne.n	8005b62 <memmove+0x2a>
 8005b60:	bd10      	pop	{r4, pc}
 8005b62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b6a:	e7f7      	b.n	8005b5c <memmove+0x24>

08005b6c <_free_r>:
 8005b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b6e:	2900      	cmp	r1, #0
 8005b70:	d044      	beq.n	8005bfc <_free_r+0x90>
 8005b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b76:	9001      	str	r0, [sp, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b7e:	bfb8      	it	lt
 8005b80:	18e4      	addlt	r4, r4, r3
 8005b82:	f000 f913 	bl	8005dac <__malloc_lock>
 8005b86:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <_free_r+0x94>)
 8005b88:	9801      	ldr	r0, [sp, #4]
 8005b8a:	6813      	ldr	r3, [r2, #0]
 8005b8c:	b933      	cbnz	r3, 8005b9c <_free_r+0x30>
 8005b8e:	6063      	str	r3, [r4, #4]
 8005b90:	6014      	str	r4, [r2, #0]
 8005b92:	b003      	add	sp, #12
 8005b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b98:	f000 b90e 	b.w	8005db8 <__malloc_unlock>
 8005b9c:	42a3      	cmp	r3, r4
 8005b9e:	d908      	bls.n	8005bb2 <_free_r+0x46>
 8005ba0:	6825      	ldr	r5, [r4, #0]
 8005ba2:	1961      	adds	r1, r4, r5
 8005ba4:	428b      	cmp	r3, r1
 8005ba6:	bf01      	itttt	eq
 8005ba8:	6819      	ldreq	r1, [r3, #0]
 8005baa:	685b      	ldreq	r3, [r3, #4]
 8005bac:	1949      	addeq	r1, r1, r5
 8005bae:	6021      	streq	r1, [r4, #0]
 8005bb0:	e7ed      	b.n	8005b8e <_free_r+0x22>
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	b10b      	cbz	r3, 8005bbc <_free_r+0x50>
 8005bb8:	42a3      	cmp	r3, r4
 8005bba:	d9fa      	bls.n	8005bb2 <_free_r+0x46>
 8005bbc:	6811      	ldr	r1, [r2, #0]
 8005bbe:	1855      	adds	r5, r2, r1
 8005bc0:	42a5      	cmp	r5, r4
 8005bc2:	d10b      	bne.n	8005bdc <_free_r+0x70>
 8005bc4:	6824      	ldr	r4, [r4, #0]
 8005bc6:	4421      	add	r1, r4
 8005bc8:	1854      	adds	r4, r2, r1
 8005bca:	42a3      	cmp	r3, r4
 8005bcc:	6011      	str	r1, [r2, #0]
 8005bce:	d1e0      	bne.n	8005b92 <_free_r+0x26>
 8005bd0:	681c      	ldr	r4, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	6053      	str	r3, [r2, #4]
 8005bd6:	4421      	add	r1, r4
 8005bd8:	6011      	str	r1, [r2, #0]
 8005bda:	e7da      	b.n	8005b92 <_free_r+0x26>
 8005bdc:	d902      	bls.n	8005be4 <_free_r+0x78>
 8005bde:	230c      	movs	r3, #12
 8005be0:	6003      	str	r3, [r0, #0]
 8005be2:	e7d6      	b.n	8005b92 <_free_r+0x26>
 8005be4:	6825      	ldr	r5, [r4, #0]
 8005be6:	1961      	adds	r1, r4, r5
 8005be8:	428b      	cmp	r3, r1
 8005bea:	bf04      	itt	eq
 8005bec:	6819      	ldreq	r1, [r3, #0]
 8005bee:	685b      	ldreq	r3, [r3, #4]
 8005bf0:	6063      	str	r3, [r4, #4]
 8005bf2:	bf04      	itt	eq
 8005bf4:	1949      	addeq	r1, r1, r5
 8005bf6:	6021      	streq	r1, [r4, #0]
 8005bf8:	6054      	str	r4, [r2, #4]
 8005bfa:	e7ca      	b.n	8005b92 <_free_r+0x26>
 8005bfc:	b003      	add	sp, #12
 8005bfe:	bd30      	pop	{r4, r5, pc}
 8005c00:	20000238 	.word	0x20000238

08005c04 <sbrk_aligned>:
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	4e0e      	ldr	r6, [pc, #56]	; (8005c40 <sbrk_aligned+0x3c>)
 8005c08:	460c      	mov	r4, r1
 8005c0a:	6831      	ldr	r1, [r6, #0]
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	b911      	cbnz	r1, 8005c16 <sbrk_aligned+0x12>
 8005c10:	f000 f8bc 	bl	8005d8c <_sbrk_r>
 8005c14:	6030      	str	r0, [r6, #0]
 8005c16:	4621      	mov	r1, r4
 8005c18:	4628      	mov	r0, r5
 8005c1a:	f000 f8b7 	bl	8005d8c <_sbrk_r>
 8005c1e:	1c43      	adds	r3, r0, #1
 8005c20:	d00a      	beq.n	8005c38 <sbrk_aligned+0x34>
 8005c22:	1cc4      	adds	r4, r0, #3
 8005c24:	f024 0403 	bic.w	r4, r4, #3
 8005c28:	42a0      	cmp	r0, r4
 8005c2a:	d007      	beq.n	8005c3c <sbrk_aligned+0x38>
 8005c2c:	1a21      	subs	r1, r4, r0
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f000 f8ac 	bl	8005d8c <_sbrk_r>
 8005c34:	3001      	adds	r0, #1
 8005c36:	d101      	bne.n	8005c3c <sbrk_aligned+0x38>
 8005c38:	f04f 34ff 	mov.w	r4, #4294967295
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	2000023c 	.word	0x2000023c

08005c44 <_malloc_r>:
 8005c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c48:	1ccd      	adds	r5, r1, #3
 8005c4a:	f025 0503 	bic.w	r5, r5, #3
 8005c4e:	3508      	adds	r5, #8
 8005c50:	2d0c      	cmp	r5, #12
 8005c52:	bf38      	it	cc
 8005c54:	250c      	movcc	r5, #12
 8005c56:	2d00      	cmp	r5, #0
 8005c58:	4607      	mov	r7, r0
 8005c5a:	db01      	blt.n	8005c60 <_malloc_r+0x1c>
 8005c5c:	42a9      	cmp	r1, r5
 8005c5e:	d905      	bls.n	8005c6c <_malloc_r+0x28>
 8005c60:	230c      	movs	r3, #12
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	2600      	movs	r6, #0
 8005c66:	4630      	mov	r0, r6
 8005c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c6c:	4e2e      	ldr	r6, [pc, #184]	; (8005d28 <_malloc_r+0xe4>)
 8005c6e:	f000 f89d 	bl	8005dac <__malloc_lock>
 8005c72:	6833      	ldr	r3, [r6, #0]
 8005c74:	461c      	mov	r4, r3
 8005c76:	bb34      	cbnz	r4, 8005cc6 <_malloc_r+0x82>
 8005c78:	4629      	mov	r1, r5
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	f7ff ffc2 	bl	8005c04 <sbrk_aligned>
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	4604      	mov	r4, r0
 8005c84:	d14d      	bne.n	8005d22 <_malloc_r+0xde>
 8005c86:	6834      	ldr	r4, [r6, #0]
 8005c88:	4626      	mov	r6, r4
 8005c8a:	2e00      	cmp	r6, #0
 8005c8c:	d140      	bne.n	8005d10 <_malloc_r+0xcc>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	4631      	mov	r1, r6
 8005c92:	4638      	mov	r0, r7
 8005c94:	eb04 0803 	add.w	r8, r4, r3
 8005c98:	f000 f878 	bl	8005d8c <_sbrk_r>
 8005c9c:	4580      	cmp	r8, r0
 8005c9e:	d13a      	bne.n	8005d16 <_malloc_r+0xd2>
 8005ca0:	6821      	ldr	r1, [r4, #0]
 8005ca2:	3503      	adds	r5, #3
 8005ca4:	1a6d      	subs	r5, r5, r1
 8005ca6:	f025 0503 	bic.w	r5, r5, #3
 8005caa:	3508      	adds	r5, #8
 8005cac:	2d0c      	cmp	r5, #12
 8005cae:	bf38      	it	cc
 8005cb0:	250c      	movcc	r5, #12
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	f7ff ffa5 	bl	8005c04 <sbrk_aligned>
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d02b      	beq.n	8005d16 <_malloc_r+0xd2>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	442b      	add	r3, r5
 8005cc2:	6023      	str	r3, [r4, #0]
 8005cc4:	e00e      	b.n	8005ce4 <_malloc_r+0xa0>
 8005cc6:	6822      	ldr	r2, [r4, #0]
 8005cc8:	1b52      	subs	r2, r2, r5
 8005cca:	d41e      	bmi.n	8005d0a <_malloc_r+0xc6>
 8005ccc:	2a0b      	cmp	r2, #11
 8005cce:	d916      	bls.n	8005cfe <_malloc_r+0xba>
 8005cd0:	1961      	adds	r1, r4, r5
 8005cd2:	42a3      	cmp	r3, r4
 8005cd4:	6025      	str	r5, [r4, #0]
 8005cd6:	bf18      	it	ne
 8005cd8:	6059      	strne	r1, [r3, #4]
 8005cda:	6863      	ldr	r3, [r4, #4]
 8005cdc:	bf08      	it	eq
 8005cde:	6031      	streq	r1, [r6, #0]
 8005ce0:	5162      	str	r2, [r4, r5]
 8005ce2:	604b      	str	r3, [r1, #4]
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	f104 060b 	add.w	r6, r4, #11
 8005cea:	f000 f865 	bl	8005db8 <__malloc_unlock>
 8005cee:	f026 0607 	bic.w	r6, r6, #7
 8005cf2:	1d23      	adds	r3, r4, #4
 8005cf4:	1af2      	subs	r2, r6, r3
 8005cf6:	d0b6      	beq.n	8005c66 <_malloc_r+0x22>
 8005cf8:	1b9b      	subs	r3, r3, r6
 8005cfa:	50a3      	str	r3, [r4, r2]
 8005cfc:	e7b3      	b.n	8005c66 <_malloc_r+0x22>
 8005cfe:	6862      	ldr	r2, [r4, #4]
 8005d00:	42a3      	cmp	r3, r4
 8005d02:	bf0c      	ite	eq
 8005d04:	6032      	streq	r2, [r6, #0]
 8005d06:	605a      	strne	r2, [r3, #4]
 8005d08:	e7ec      	b.n	8005ce4 <_malloc_r+0xa0>
 8005d0a:	4623      	mov	r3, r4
 8005d0c:	6864      	ldr	r4, [r4, #4]
 8005d0e:	e7b2      	b.n	8005c76 <_malloc_r+0x32>
 8005d10:	4634      	mov	r4, r6
 8005d12:	6876      	ldr	r6, [r6, #4]
 8005d14:	e7b9      	b.n	8005c8a <_malloc_r+0x46>
 8005d16:	230c      	movs	r3, #12
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	4638      	mov	r0, r7
 8005d1c:	f000 f84c 	bl	8005db8 <__malloc_unlock>
 8005d20:	e7a1      	b.n	8005c66 <_malloc_r+0x22>
 8005d22:	6025      	str	r5, [r4, #0]
 8005d24:	e7de      	b.n	8005ce4 <_malloc_r+0xa0>
 8005d26:	bf00      	nop
 8005d28:	20000238 	.word	0x20000238

08005d2c <_realloc_r>:
 8005d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d30:	4680      	mov	r8, r0
 8005d32:	4614      	mov	r4, r2
 8005d34:	460e      	mov	r6, r1
 8005d36:	b921      	cbnz	r1, 8005d42 <_realloc_r+0x16>
 8005d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	f7ff bf81 	b.w	8005c44 <_malloc_r>
 8005d42:	b92a      	cbnz	r2, 8005d50 <_realloc_r+0x24>
 8005d44:	f7ff ff12 	bl	8005b6c <_free_r>
 8005d48:	4625      	mov	r5, r4
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d50:	f000 f838 	bl	8005dc4 <_malloc_usable_size_r>
 8005d54:	4284      	cmp	r4, r0
 8005d56:	4607      	mov	r7, r0
 8005d58:	d802      	bhi.n	8005d60 <_realloc_r+0x34>
 8005d5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d5e:	d812      	bhi.n	8005d86 <_realloc_r+0x5a>
 8005d60:	4621      	mov	r1, r4
 8005d62:	4640      	mov	r0, r8
 8005d64:	f7ff ff6e 	bl	8005c44 <_malloc_r>
 8005d68:	4605      	mov	r5, r0
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	d0ed      	beq.n	8005d4a <_realloc_r+0x1e>
 8005d6e:	42bc      	cmp	r4, r7
 8005d70:	4622      	mov	r2, r4
 8005d72:	4631      	mov	r1, r6
 8005d74:	bf28      	it	cs
 8005d76:	463a      	movcs	r2, r7
 8005d78:	f7ff fed0 	bl	8005b1c <memcpy>
 8005d7c:	4631      	mov	r1, r6
 8005d7e:	4640      	mov	r0, r8
 8005d80:	f7ff fef4 	bl	8005b6c <_free_r>
 8005d84:	e7e1      	b.n	8005d4a <_realloc_r+0x1e>
 8005d86:	4635      	mov	r5, r6
 8005d88:	e7df      	b.n	8005d4a <_realloc_r+0x1e>
	...

08005d8c <_sbrk_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4d06      	ldr	r5, [pc, #24]	; (8005da8 <_sbrk_r+0x1c>)
 8005d90:	2300      	movs	r3, #0
 8005d92:	4604      	mov	r4, r0
 8005d94:	4608      	mov	r0, r1
 8005d96:	602b      	str	r3, [r5, #0]
 8005d98:	f7fb f832 	bl	8000e00 <_sbrk>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d102      	bne.n	8005da6 <_sbrk_r+0x1a>
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	b103      	cbz	r3, 8005da6 <_sbrk_r+0x1a>
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	20000240 	.word	0x20000240

08005dac <__malloc_lock>:
 8005dac:	4801      	ldr	r0, [pc, #4]	; (8005db4 <__malloc_lock+0x8>)
 8005dae:	f000 b811 	b.w	8005dd4 <__retarget_lock_acquire_recursive>
 8005db2:	bf00      	nop
 8005db4:	20000244 	.word	0x20000244

08005db8 <__malloc_unlock>:
 8005db8:	4801      	ldr	r0, [pc, #4]	; (8005dc0 <__malloc_unlock+0x8>)
 8005dba:	f000 b80c 	b.w	8005dd6 <__retarget_lock_release_recursive>
 8005dbe:	bf00      	nop
 8005dc0:	20000244 	.word	0x20000244

08005dc4 <_malloc_usable_size_r>:
 8005dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dc8:	1f18      	subs	r0, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	bfbc      	itt	lt
 8005dce:	580b      	ldrlt	r3, [r1, r0]
 8005dd0:	18c0      	addlt	r0, r0, r3
 8005dd2:	4770      	bx	lr

08005dd4 <__retarget_lock_acquire_recursive>:
 8005dd4:	4770      	bx	lr

08005dd6 <__retarget_lock_release_recursive>:
 8005dd6:	4770      	bx	lr

08005dd8 <_init>:
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	bf00      	nop
 8005ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dde:	bc08      	pop	{r3}
 8005de0:	469e      	mov	lr, r3
 8005de2:	4770      	bx	lr

08005de4 <_fini>:
 8005de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de6:	bf00      	nop
 8005de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dea:	bc08      	pop	{r3}
 8005dec:	469e      	mov	lr, r3
 8005dee:	4770      	bx	lr
